nwDC <- wDC/(nrow(TP)-1)
A <- get.adjacency(G,sparse=F) #Adjacency (i and j are inverted)
A <- t(A)
rownames(A) <- 1:nrow(A)
colnames(A) <- 1:nrow(A)
nodelist = cbind(0:61, 0:61,TP[,1],plotting_layout[,1])
names = c("Id","Names","trophic_position","xaxis")
nodelist %>%
write.table(.,file = "letsee.csv",row.names=FALSE, col.names=FALSE, sep="\t")
View(nodelist)
names(nodelist) <- names
nodelist
View(plotting_layout)
View(nodelist)
nodelist %>%
write.table(.,file = "letsee.csv",row.names=FALSE, col.names=FALSE, sep="\t") %>%
colNames = names
library(plyr)
library(dplyr)
nodelist %>%
write.table(.,file = "letsee.csv",row.names=FALSE, col.names=FALSE, sep="\t") %>%
colNames = names
nodelist %>%
write.table(.,file = "letsee.csv",row.names=FALSE, col.names=FALSE, sep="\t") %>%
colNames() = names
nodelist %>%
write.table(.,file = "letsee.csv",row.names=FALSE, col.names=FALSE, sep="\t") %>%
#colNames = names
colnames = names
nodelist %>%
write.table(.,file = "letsee.csv",row.names=FALSE, col.names=FALSE, sep="\t") %>%
#colNames = names
#colnames = names
setNames(., names)
nodelist %>%
write.table(.,file = "letsee.csv",row.names=FALSE, col.names=FALSE, sep="\t") %>%
#colNames = names
#colnames = names
#setNames(., names)
colNames(., names)
library(magrittr)
nodelist %>%
write.table(.,file = "letsee.csv",row.names=FALSE, col.names=FALSE, sep="\t") %>%
#colNames = names
#colnames = names
#setNames(., names)
#colNames(., names)
set_colnames(names)
nodelist %>%
write.table(.,file = "letsee.csv",row.names=FALSE, col.names=names, sep="\t")
nodelist %>%
write.table(.,file = "/Users/ema/github/data_aggregation/data/Napoli_Gephi_nodelist.csv",row.names=FALSE, col.names=names, sep="\t")
length(V(G))
r <- runif(10, -1, 1)
r
r <- runif(length(V(G)), -max(TP[,1]), max(TP[,1]))
xaxis = runif(length(V(G)), -max(TP[,1]), max(TP[,1]))
nodelist = cbind(0:61, 0:61,TP[,1],xaxis)
names = c("Id","Names","trophic_position","xaxis")
nodelist %>%
write.table(.,file = "/Users/ema/github/data_aggregation/data/Napoli_Gephi_nodelist.csv",row.names=FALSE, col.names=names, sep="\t")
xaxis = runif(length(V(G)), -max(TP[,1]), max(TP[,1]))
nodelist = cbind(0:61, 0:61,TP[,1],xaxis)
names = c("Id","Names","trophic_position","xaxis")
nodelist %>%
write.table(.,file = "/Users/ema/github/data_aggregation/gephi_files/Napoli_Gephi_nodelist.csv",row.names=FALSE, col.names=names, sep="\t")
rm(list = ls()); cat("\014"); setwd('/Users/ema/Github/Data_aggregation/data/ewe_loopless')
library(leiden)
library(ggplot2)
library(tibble)
library(plyr)
library(igraph)
library(NetIndices)
library(dplyr)
library(RColorBrewer)
library(rnetcarto)
#DENSITY-BASED MODULARITY
file_list = list.files()
A_matrices = lapply(file_list, function(i){
as.matrix(read.csv(i, header= FALSE))
})
G = matrix(list(), length(A_matrices),1)
for (i in 1:length(G)){
G[[i]] = graph_from_adjacency_matrix(A_matrices[[i]], mode = "directed", weighted = "true", diag = TRUE)
}
partition = matrix(list(), length(A_matrices),1)
for (i in 1:length(G)){
partition[[i]] <- leiden(G[[i]])
}
for (i in 1:length(partition)){
name = paste("partition",file_list[[i]], sep="_")
write.table(partition[[i]],file = name, row.names = FALSE, col.names = FALSE, sep="\t")
}
#PREY-BASED MODULARITY AND PREDATOR-BASED MODULARITY
A = A_matrices[[1]]
edgelist = matrix(,nrow = 0, ncol = 2)
for (i in 1:ncol(A)){
for (j in 1:ncol(A)) {
if (A[i,j] != 0){
x = c(i,j)
edgelist = rbind(edgelist, x)
}
}
}
netcarto(edgelist, seed = as.integer(floor(runif(1, 1, 100000001))), iterfac = 1, coolingfac = 0.9, bipartite = TRUE)
View(A_matrices)
file_list = list.files()
file_list = list.files()
A_matrices = lapply(file_list, function(i){
as.matrix(read.csv(i, header= FALSE))
})
file_list = list.files()
A_matrices = lapply(file_list, function(i){
as.matrix(read.csv(i, header= FALSE))
})
#DENSITY-BASED MODULARITY
file_list = list.files()
A_matrices = lapply(file_list, function(i){
as.matrix(read.csv(i, header= FALSE))
})
View(A_matrices)
A = A_matrices[[1]]
View(A)
edgelist = matrix(,nrow = 0, ncol = 2)
for (i in 1:ncol(A)){
for (j in 1:ncol(A)) {
if (A[i,j] != 0){
x = c(i,j)
edgelist = rbind(edgelist, x)
}
}
}
netcarto(edgelist, seed = as.integer(floor(runif(1, 1, 100000001))), iterfac = 1, coolingfac = 0.9, bipartite = TRUE)
View(A_matrices)
A = A_matrices[[3]]
edgelist = matrix(,nrow = 0, ncol = 2)
for (i in 1:ncol(A)){
for (j in 1:ncol(A)) {
if (A[i,j] != 0){
x = c(i,j)
edgelist = rbind(edgelist, x)
}
}
}
edgelist = matrix(,nrow = 0, ncol = 2)
for (i in 1:ncol(A)){
for (j in 1:ncol(A)) {
if (A[i,j] != 0){
x = c(i,j)
edgelist = rbind(edgelist, x)
}
}
}
edgelist = matrix(,nrow = 0, ncol = 2)
for (i in 1:ncol(A)){
for (j in 1:ncol(A)) {
if (A[i,j] != 0){
x = c(i,j)
edgelist = rbind(edgelist, x)
}
}
}
edgelist = matrix(,nrow = 0, ncol = 2)
for (i in 1:ncol(A)){
for (j in 1:ncol(A)) {
if (A[i,j] != 0){
x = c(i,j)
edgelist = rbind(edgelist, x)
}
}
}
netcarto(edgelist, seed = as.integer(floor(runif(1, 1, 100000001))), iterfac = 1, coolingfac = 0.9, bipartite = TRUE)
edgelist_inv = cbind(edgelist$V1, edgelist$V2)
edgelist
edgelist$V1
View(edgelist)
edgelist_inv = cbind(edgelist[,1], edgelist[,2])
edgelist_inv = cbind(edgelist[,2], edgelist[,1])
View(edgelist_inv)
View(edgelist)
edgelist_inv = cbind(edgelist[,2], edgelist[,1])
netcarto(edgelist, seed = as.integer(floor(runif(1, 1, 100000001))), iterfac = 1, coolingfac = 0.9, bipartite = TRUE) #Prey-based
netcarto(edgelist_inv, seed = as.integer(floor(runif(1, 1, 100000001))), iterfac = 1, coolingfac = 0.9, bipartite = TRUE) #Predator-based
object = netcarto(edgelist, seed = as.integer(floor(runif(1, 1, 100000001))), iterfac = 1, coolingfac = 0.9, bipartite = TRUE) #Prey-based
View(object)
A
graph = G[[3]]
as_adj_list(graph, mode = "in")
adj_list_in = as_adj_list(graph, mode = "in")
adj_list_in = as_adj_list(graph, mode = "in")
adj_list_out = as_adj_list(graph, mode = "out")
View(adj_list_in)
View(adj_list_out)
netcarto(A, seed = as.integer(floor(runif(1, 1, 100000001))), iterfac = 1, coolingfac = 0.9, bipartite = TRUE)
library(bipartite)
install.packages("bipartite")
library(bipartite)
data(vazarr)
data(vazarr)
force(vazarr)
View(vazarr)
netcarto(vazarr,bipartite=TRUE)
netcarto(A, bipartite = TRUE)
rownames(A) = 1:nrow(adj)
rownames(A) = 1:nrow(A)
columnnames(A) = 1:nrow(A)
colnames(A) = 1:nrow(A)
rownames(A) = 1:nrow(A)
colnames(A) = 1:nrow(A)
netcarto(A, bipartite = TRUE)
netcarto(A, seed = as.integer(floor(runif(1, 1, 100000001))), iterfac = 1, coolingfac = 0.9, bipartite = TRUE)
netcarto(A, seed = as.integer(floor(runif(1, 1, 100000001))), iterfac = 1, coolingfac = 0.9, bipartite = TRUE)
netcarto(A, bipartite = TRUE)
A = t(A)
netcarto(A, bipartite = TRUE)
object = netcarto(A, bipartite = TRUE)
object$name
whos
eapply(.GlobalEnv,typeof) #Check all variables
object %>%
summarise()
object = unlist(object)
object %>%
summarise()
object = as.data.frame(object)
object %>%
summarise()
View(object)
prey = netcarto(A, bipartite = TRUE)
prey = netcarto(A, bipartite = TRUE)
A = t(A)
predator = netcarto(A, bipartite = TRUE)
A = A_matrices[[3]]
rownames(A) = 1:nrow(A) #Bug fix: it doesn't run if the rows and columns don't have a name.
colnames(A) = 1:nrow(A)
prey = netcarto(A, bipartite = TRUE)
A = t(A)
predator = netcarto(A, bipartite = TRUE)
View(predator)
predator[[1]]
z = predator[[1]]
eapply(.GlobalEnv,typeof) #Check all variables
z2 = unlist(z)
z2
View(prey)
df <- data.frame(matrix(unlist(prey), nrow=length(prey), byrow=TRUE))
View(df)
prey
prey[[1]]
typeof(prey[[1]])
prey[[1]]$name
okay = prey[[1]]$home
prey[[1]]$name
hello = prey[[1]]$home
graph_from_adjacency_matrix(A, mode = "directed", weighted = "true", diag = TRUE)
prey
prey[[1]]
prey_onlyone = prey[[1]]
prey_onlyone[,1]
prey_onlyone[,2]
hi =cbind(prey_onlyone[,1], prey_onlyone[,2])
View(hi)
colnames(prey_onlyone)
rownames(prey_onlyone)
as.double(rownames(prey_onlyone))
cbind(as.double(rowname(prey[[1]])), prey[[1]]$module)
cbind(as.double(rownames(prey[[1]])), prey[[1]]$module)
prey
A = A_matrices[[3]]
rownames(A) = 1:nrow(A) #Bug fix: it doesn't run if the rows and columns don't have a name.
colnames(A) = 1:nrow(A)
prey = netcarto(A, bipartite = TRUE)
A = t(A)
predator = netcarto(A, bipartite = TRUE)
prey
A
rowSums(A)
rowSums(A)
colSums(A)
prey
predator
prey
View(A)
A = A_matrices[[3]]
rownames(A) = 1:nrow(A) #Bug fix: it doesn't run if the rows and columns don't have a name.
rownames(A) = 1:nrow(A) #Bug fix: it doesn't run if the rows and columns don't have a name.
colnames(A) = 1:nrow(A)
rownames(A) = 1:nrow(A) #Bug fix: it doesn't run if the rows and columns don't have a name.
colnames(A) = 1:nrow(A)
prey = netcarto(A, bipartite = TRUE)
prey
rownames(A) = c(one,two,three,four,five,six,seven,eight,nine,ten,elevan,twelve,thirteen,fourteen,fifteen,sixteen)
rownames(A) = c("one","two","three","four","five","six","seven","eight","nine","ten","elevan","twelve","thirteen","fourteen","fifteen","sixteen")
colnames(A) = c("one","two","three","four","five","six","seven","eight","nine","ten","elevan","twelve","thirteen","fourteen","fifteen","sixteen")
prey = netcarto(A, bipartite = TRUE)
prey
View(A)
View(prey)
A = A_matrices[[3]]
rownames(A) = 1:nrow(A) #Bug fix: it doesn't run if the rows and columns don't have a name.
colnames(A) = 1:nrow(A)
prey = netcarto(A, bipartite = TRUE)
A = t(A)
predator = netcarto(A, bipartite = TRUE)
cbind(prey[[1]]$name, prey[[1]]$module)
A = A_matrices[[3]]
rownames(A) = 1:nrow(A) #Bug fix: it doesn't run if the rows and columns don't have a name.
colnames(A) = 1:nrow(A)
prey = netcarto(A, bipartite = TRUE)
prey
prey = cbind(prey[[1]]$name, prey[[1]]$module)
prey
A = A_matrices[[3]]
rownames(A) = 1:nrow(A) #Bug fix: it doesn't run if the rows and columns don't have a name.
colnames(A) = 1:nrow(A)
prey = netcarto(A, bipartite = TRUE)
prey
prey[[1]]$name
prey = cbind(prey[[1]]$name, prey[[1]]$module)
prey
A = A_matrices[[3]]
A = A_matrices[[3]]
rownames(A) = 1:nrow(A) #Bug fix: it doesn't run if the rows and columns don't have a name.
colnames(A) = 1:nrow(A)
prey = netcarto(A, bipartite = TRUE)
prey
cbind(prey[[1]]$name, prey[[1]]$module)
prey_names = prey[[1]]$name
prey_modules = prey[[1]]$module
prey_names
prey_moduels
prey_modules
prey_names
prey_modules
prey_names
prey_names
prey[[1]]
as.data.frame(prey[[1]])
prey_names = as.data.frame(prey[[1]]$name)
View(prey_names)
cbind(prey_names, prey_modules)
A = A_matrices[[3]]
rownames(A) = 1:nrow(A) #Bug fix: it doesn't run if the rows and columns don't have a name.
colnames(A) = 1:nrow(A)
prey = netcarto(A, bipartite = TRUE)
cbind(as.data.frame(prey[[1]]$name), prey[[1]]$module)
prey
cbind(as.data.frame(prey[[1]]$name), prey[[1]]$module)
pret = cbind(as.data.frame(prey[[1]]$name), prey[[1]]$module)
A = A_matrices[[3]]
rownames(A) = 1:nrow(A) #Bug fix: it doesn't run if the rows and columns don't have a name.
colnames(A) = 1:nrow(A)
prey = netcarto(A, bipartite = TRUE)
prey
prey = cbind(as.data.frame(prey[[1]]$name), prey[[1]]$module)
prey
A = t(A)
predator = netcarto(A, bipartite = TRUE)
predator
predator = cbind(as.data.frame(predator[[1]]$name), predator[[1]]$module)
predator
prey
prey %>%
arrange(1)
prey %>%
arrange()
prey %>%
arrange(prey[[1]]$name)
colnames(prey) = c("node","module")
View(prey)
prey %>%
arrange(node)
prey = as.integer(prey)
prey = as.numeri(unlist(prey))
prey = as.numeric(unlist(prey))
prey
A = A_matrices[[3]]
rownames(A) = 1:nrow(A) #Bug fix: it doesn't run if the rows and columns don't have a name.
colnames(A) = 1:nrow(A)
prey = netcarto(A, bipartite = TRUE)
prey = cbind(as.data.frame(prey[[1]]$name), prey[[1]]$module)
colnames(prey) = c("node","module")
A
prey
prey = cbind(as.numeric(prey[[1]]$name), as.numeri(prey[[1]]$module))
prey = cbind(as.numeric(unlist(prey[[1]]$name)), as.numeric(unlist(prey[[1]]$module)))
prey[,1]
prey[,1] = as.numeric(unlist(prey[,1]))
prey
A = A_matrices[[3]]
rownames(A) = 1:nrow(A) #Bug fix: it doesn't run if the rows and columns don't have a name.
colnames(A) = 1:nrow(A)
prey = netcarto(A, bipartite = TRUE)
prey = cbind(as.data.frame(prey[[1]]$name), prey[[1]]$module)
prey
prey = as.data.frame(cbind(as.data.frame(prey[[1]]$name), prey[[1]]$module))
prey = cbind(as.data.frame(prey[[1]]$name), prey[[1]]$module)
A = A_matrices[[3]]
rownames(A) = 1:nrow(A) #Bug fix: it doesn't run if the rows and columns don't have a name.
colnames(A) = 1:nrow(A)
prey = netcarto(A, bipartite = TRUE)
prey = cbind(as.data.frame(prey[[1]]$name), prey[[1]]$module))
as.data.frame(prey[[1]]$name)
as.data.frame(prey[[1]]$name)
as.data.frame(prey[[1]]$name)
prey = cbind(as.data.frame(prey[[1]]$name), prey[[1]]$module)
prey
colnames(prey) = c("node","module")
prey
prey %>%
colnames = c("node","module")
colnames(prey) = c("node","module")
prey %>%
colnames(prey) = c("node","module")
prey %>%
summarise()
prey = as.data.frame(prey)
prey %>%
summarise()
prey
eapply(.GlobalEnv,typeof) #Check all variables
whatever = list.as.matrix(prey, byrow=FALSE, filler = NA)
prey[[1]]$name
A = A_matrices[[3]]
rownames(A) = 1:nrow(A) #Bug fix: it doesn't run if the rows and columns don't have a name.
colnames(A) = 1:nrow(A)
prey = netcarto(A, bipartite = TRUE)
prey[[1]]$name
unlist(prey[[1]]$name)
A = A_matrices[[3]]
rownames(A) = 1:nrow(A) #Bug fix: it doesn't run if the rows and columns don't have a name.
colnames(A) = 1:nrow(A)
prey = netcarto(A, bipartite = TRUE)
prey
unlist(prey[[1]]$name)
df = data.frame(unlist(prey[[1]]$name),unlist(prey[[1]]$module))
df
colnames(df) = c("node","module")
df
prey
df %>%
colnames(c("node","module"))
df %>%
colnames = c("node","module")
df %>%
rename_with(.cols = c("node","module"))
df %>%
rename_with(.fn, .cols = c("node","module"))
df %>%
rename_with(.df, .fn, .cols = c("node","module"))
df %>%
rename_all(c("node","module"))
df %>%
colnames = c("node","module")
df %>%
`colnames = c("node","module")`
colnames(df) = c("node","module")
View(df)
prey %>%
arrange(node)
df = data.frame(as.numeric(unlist(prey[[1]]$name)),as.numeric(unlist(prey[[1]]$module)))
colnames(df) = c("node","module")
prey %>%
arrange(node)
df %>%
arrange(node)
df %>%
rename(c("node","module"))
arrange(node)
df %>%
rename_with(c("node","module"))
arrange(node)
df %>%
rename_with(.fn, c("node","module"))
arrange(node)
df %>%
arrange(node)
A = A_matrices[[3]]
rownames(A) = 1:nrow(A) #Bug fix: it doesn't run if the rows and columns don't have a name.
colnames(A) = 1:nrow(A)
prey = netcarto(A, bipartite = TRUE)
prey
df = data.frame(as.numeric(unlist(prey[[1]]$name)),as.numeric(unlist(prey[[1]]$module)))
df
df = data.frame(unlist(prey[[1]]$name),unlist(prey[[1]]$module))
df
colnames(df) = c("node","module")
df %>%
arrange(node)
df %>%
convert(int(node))
arrange(node)
df %>%
mutate_at(vars(node,module),list(integer()))
arrange(node)
df$node
as.integer(df$node)
as.double(df$node)
df %>%
arrange(node)
df$node
as.integer(df$node)
as.numeric(as.character(df[,1]))
df = data.frame(as.numeric(as.charachter(prey[[1]]$name)),as.numeric(as.charachter(prey[[1]]$module)))
df = data.frame(as.numeric(as.character(prey[[1]]$name)),as.numeric(as.character(prey[[1]]$module)))
colnames(df) = c("node","module")
colnames(df) = c("node","module")
df %>%
arrange(node)
ncol(A)
df$node
df$node[1]
