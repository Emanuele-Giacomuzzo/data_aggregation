for (predator in 1:ncol(A)) {
if (A[prey,predator] != 0){
x = c(prey,predator)
edgelist = rbind(edgelist, x)
}
}
}
edgelist
?rbin
? rbin
edgelist = matrix(,nrow = 0, ncol = 3)
for (prey in 1:ncol(A)){
for (predator in 1:ncol(A)) {
if (A[prey,predator] != 0){
edgelist = rbind(edgelist, c(prey,predator,A[prey,predator]))
}
}
}
return(edgelist)
edgelist
write.csv(edgelist)
? write.csv
write.csv(edgelist,file = 'edgelist_web_1.csv')
setwd('/Users/ema/Github/Data_aggregation/Food_web_tools/R_food_web_tools/trophic_position')
setwd('/Users/ema/Github/Data_aggregation/r/Food_web_tools/trophic_position')
write.csv(edgelist,file = 'edgelist_web_1.csv')
? write.csv
? write.csv
write.csv(edgelist,file = 'edgelist_web_1.csv', row.names = FALSE, col.names = FALSE)
write.csv(edgelist,file = 'edgelist_web_1.csv', row.names = FALSE, col.names = FALSE, header = FALSE)
write.csv(edgelist,file = 'edgelist_web_1.csv', row.names = FALSE, col.names = FALSE, header = FALSE)
? write.csv
? write.csv
write.csv(edgelist,file = 'edgelist_web_1.csv', row.names = FALSE, col.names = FALSE, header = FALSE)
write.csv(edgelist,file = 'edgelist_web_1.csv', row.names = FALSE, col.names = FALSE)
write.table(edgelist,file = 'edgelist_web_1.csv', row.names = FALSE, col.names = FALSE)
write.table(edgelist,file = 'edgelist_web_1.csv', row.names = FALSE, col.names = FALSE,sep = ",")
A = as.matrix(read.csv('/Users/ema/github/data_aggregation/data/ecobase/adjacency_matrices/A_loops_001.txt', header= FALSE))
source('../writeEdgelist')
setwd('/Users/ema/Github/Data_aggregation/r/Food_web_tools/trophic_position')
source('../writeEdgelist')
setwd('/Users/ema/Github/Data_aggregation/r/Food_web_tools')
source('writeEdgelist')
list.files
list.files()
source('writeEdgelist.r')
source('~/trophicPositionRecoded.r', echo=TRUE)
source('..writeEdgelist.r')
source('../writeEdgelist.r')
list.files()
get.pwd
getpwd
getwd
getwd()
cd('trophic_position')
cd(trophic_position)
list.files
list.files()
cd(trophic_position)
cd("trophic_position"")
list.files()
getwd
getwd()
getwd()
getwd()
setwd(trophic_position)
setwd('trophic_position')
getwd(+)
getwd()
source('../writeEdgelist.r')
getwd()
list.files()
writeEdgelist(A)
name=hello
name='hello'
paste0(name,'.csv')
writeEdgelist(A,'web_1')
writeEdgelist(A,web_1)
source('../writeEdgelist.r')
writeEdgelist(A,'web_1')
writeEdgelist(A,'web_1')
rm(list=ls())
setwd('/Users/ema/Github/Data_aggregation/r/Food_web_tools/trophic_position')
getwd()
source('../writeEdgelist.r')
source('../readEdgelist.r')
setwd('/Users/ema/github/data_aggregation/r/food_web_tools/trophic_position')
source('../writeEdgelist.r')
source('../readEdgelist.r')
A = read.matrix('/Users/ema/github/data_aggregation/data/ecobase/adjacency_matrices/A_loops_001.txt')
A = read.csv('/Users/ema/github/data_aggregation/data/ecobase/adjacency_matrices/A_loops_001.txt')
A
A = as.matrix(read.csv('/Users/ema/github/data_aggregation/data/ecobase/adjacency_matrices/A_loops_001.txt'))
A
writeEdgelist(A,web_1)
writeEdgelist(A,'web_1')
edgelist = matrix(,nrow = 0, ncol = 3)
for (prey in 1:ncol(A)){
for (predator in 1:ncol(A)) {
if (A[prey,predator] != 0){
edgelist = rbind(edgelist, c(prey,predator,A[prey,predator]))
}
}
}
edgelist = rbind(edgelist, c(prey,predator,A[prey,predator]))
edgelist
edgelist
A[prey,predator]
ncol(A)
nrow(A)
A
writeEdgelist(A,'web_1')
A = as.matrix(read.csv('/Users/ema/github/data_aggregation/data/ecobase/adjacency_matrices/A_loops_001.txt',header=F))
A
writeEdgelist(A,'web_1')
? readEdgelist
readEdgelist('edgelist_web_1.csv')
file_name=edgelist_web_1.csv
file_name='edgelist_web_1.csv''
file_name
file_name = "edgelist_web_1.csv"
readEdgelist("edgelist_web_1.csv")
data = read.table(file_name, header = F)
nodeID = levels(factor(c(as.character(data[,1]), as.character(data[,2]))))
nr_of_nodes = length(nodeID)
nodeID = levels(factor(c(as.character(data[,1]), as.character(data[,2]))))
data = read.table(file_name, header = F)
nodeID = levels(factor(c(as.character(data[,1]), as.character(data[,2]))))
data
writeEdgelist(A,'web_1')
readEdgelist("edgelist_web_1.csv")
setwd('/Users/ema/github/data_aggregation/r/food_web_tools/trophic_position')
source('../writeEdgelist.r')
source('../readEdgelist.r')
A = as.matrix(read.csv('/Users/ema/github/data_aggregation/data/ecobase/adjacency_matrices/A_loops_001.txt',header=F))
writeEdgelist(A,'web_1')
readEdgelist("edgelist_web_1.csv")
readEdgelist("edgelist_web_1.csv")
A2 = readEdgelist("edgelist_web_1.csv")
A2
data = read.table(file_name, header = F)
data
nodeID = levels(factor(c(as.character(data[,1]), as.character(data[,2]))))
nodeID
nr_of_nodes = length(nodeID)
A = matrix(rep(0, nr_of_nodes^2), nrow = nr_of_nodes, ncol = nr_of_nodes)
rownames(A) = nodeID
colnames(A) = nodeID
rownames(A)
source('../addFrontZeros.r')
setwd('/Users/ema/github/data_aggregation/r/food_web_tools/trophic_position')
source('../writeEdgelist.r')
source('../readEdgelist.r')
source('../addFrontZeros.r')
source('../../addFrontZeros.r')
addFrontZeros(1)
? matrix
rownames(A)
rownames(A[1])
rownames(A[[1]])
A
A = as.matrix(read.csv('/Users/ema/github/data_aggregation/data/ecobase/adjacency_matrices/A_loops_001.txt',header=F))
A
length(A)
nrow(A)
for (node in 1:nrow(A)) {
addFrontZeros(node)
}
for (node in 1:nrow(A)) {
addFrontZeros(node)
addFrontZeros
}
addFrontZeros
for (node in 1:nrow(A)) {
hey = addFrontZeros(node)
}
hey
node_names = list
for (node in 1:nrow(A)) {
node_names[node] = addFrontZeros(node)
}
node_names = list
for (node in 1:nrow(A)) {
node_names[[node]] = addFrontZeros(node)
}
1:nrow(A)
node_names
node_names = vector(mode = 'list', length = nrow(A))
for (node in 1:nrow(A)) {
node_names[[node]] = addFrontZeros(node)
}
node_names
for (node in 1:nrow(A)) {
node_names[node] = addFrontZeros(node)
}
node_names
data = read.table(file_name, header = F)
writet.table(node_names)
write.table(node_names)
getwd)
getwd())
getwd()
write.table(node_names,file = 'node_names.txt', row.names = FALSE, col.names = FALSE,sep = "\t")
write.table(node_names,file = 'node_names.txt', row.names = FALSE, col.names = FALSE,sep = ",")
write.table(node_names,file = 'node_names.csv', row.names = FALSE, col.names = FALSE,sep = ",")
write.table(node_names, file = 'node_names.csv', row.names = FALSE, col.names = FALSE, sep = "," , quote = F)
setwd('/Users/ema/github/data_aggregation/r/food_web_tools/trophic_position')
source('../writeEdgelist.r')
source('../readEdgelist.r')
source('../../addFrontZeros.r')
A = as.matrix(read.csv('/Users/ema/github/data_aggregation/data/ecobase/adjacency_matrices/A_loops_001.txt',header=F)
writeEdgelist(A,'web_1')
A2 = readEdgelist("edgelist_web_1.csv")
A = as.matrix(read.csv('/Users/ema/github/data_aggregation/data/ecobase/adjacency_matrices/A_loops_001.txt',header=F)
A = as.matrix( read.csv('/Users/ema/github/data_aggregation/data/ecobase/adjacency_matrices/A_loops_001.txt'), header = F)
A = as.matrix( read.csv('/Users/ema/github/data_aggregation/data/ecobase/adjacency_matrices/A_loops_001.txt'), header = FALSE)
writeEdgelist(A,'web_1')
setwd('/Users/ema/github/data_aggregation/r/food_web_tools/trophic_position')
source('../writeEdgelist.r')
source('../readEdgelist.r')
source('../../addFrontZeros.r')
A = as.matrix( read.csv('/Users/ema/github/data_aggregation/data/ecobase/adjacency_matrices/A_loops_001.txt'), header = FALSE)
writeEdgelist(A,'web_1')
A
A = as.matrix( read.csv('/Users/ema/github/data_aggregation/data/ecobase/adjacency_matrices/A_loops_001.txt'), header = F)
A
read.csv
? read.csv
A = as.matrix( read.csv('/Users/ema/github/data_aggregation/data/ecobase/adjacency_matrices/A_loops_001.txt'), header = F)
A
A = as.matrix( read.csv('/Users/ema/github/data_aggregation/data/ecobase/adjacency_matrices/A_loops_001.txt'), header = FALSE)
A
read.csv('/Users/ema/github/data_aggregation/data/ecobase/adjacency_matrices/A_loops_001.txt')
A = as.matrix( read.csv('/Users/ema/github/data_aggregation/data/ecobase/adjacency_matrices/A_loops_001.txt'), header = F)
A
A = as.matrix( read.csv('/Users/ema/github/data_aggregation/data/ecobase/adjacency_matrices/A_loops_001.txt'), header = F, row.names = F)
A
A = as.matrix( read.csv('/Users/ema/github/data_aggregation/data/ecobase/adjacency_matrices/A_loops_001.txt'), header = F, row.names = F, col.names = F)
A
A = as.matrix( read.csv('/Users/ema/github/data_aggregation/data/ecobase/adjacency_matrices/A_loops_001.txt'), header = F, sep = ",", row.names = F, col.names = F)
A
A = as.matrix( read.csv('/Users/ema/github/data_aggregation/data/ecobase/adjacency_matrices/A_loops_001.txt'), header = T, sep = ",", row.names = F, col.names = F)
A
A = as.matrix( read.csv('/Users/ema/github/data_aggregation/data/ecobase/adjacency_matrices/A_loops_001.txt'), header = F, sep = ",", row.names = F, col.names = F)
A
A = as.matrix( read.table('/Users/ema/github/data_aggregation/data/ecobase/adjacency_matrices/A_loops_001.txt'), header = F, sep = ",", row.names = F, col.names = F)
A
A = as.matrix( read.csv('/Users/ema/github/data_aggregation/data/ecobase/adjacency_matrices/A_loops_001.txt'), header = F, sep = ",", row.names = F, col.names = F)
A = as.matrix( read.csv('/Users/ema/github/data_aggregation/data/ecobase/adjacency_matrices/A_loops_001.txt'), header = F, sep = ",", row.names = F, col.names = F)
A
A = as.matrix( read.csv(file = '/Users/ema/github/data_aggregation/data/ecobase/adjacency_matrices/A_loops_001.txt'), header = F, sep = ",", row.names = F, col.names = F)
A
A = as.matrix( read.csv(file = '/Users/ema/github/data_aggregation/data/ecobase/adjacency_matrices/A_loops_001.txt', header = F, sep = ",", row.names = F, col.names = F)
A = as.matrix( read.csv (file = '/Users/ema/github/data_aggregation/data/ecobase/adjacency_matrices/A_loops_001.txt', header = F, sep = ",", row.names = F, col.names = F))
A = read.csv (file = '/Users/ema/github/data_aggregation/data/ecobase/adjacency_matrices/A_loops_001.txt', header = F, sep = ",", row.names = F, col.names = F)
A = read.csv (file = '/Users/ema/github/data_aggregation/data/ecobase/adjacency_matrices/A_loops_001.txt', header = F)
A
A = as.matrix(read.csv (file = '/Users/ema/github/data_aggregation/data/ecobase/adjacency_matrices/A_loops_001.txt', header = F))
A = as.matrix(read.csv (file = '/Users/ema/github/data_aggregation/data/ecobase/adjacency_matrices/A_loops_001.txt', header = F))
A
writeEdgelist(A,'web_1')
node_names = vector(mode = 'list', length = nrow(A))
for (node in 1:nrow(A)) {
node_names[node] = addFrontZeros(node)
}
A2 = readEdgelist("edgelist_web_1.csv")
A2
data = read.table(file_name, header = F)
nodeID = levels(factor(c(as.character(data[,1]), as.character(data[,2]))))
nr_of_nodes = length(nodeID)
A = matrix(rep(0, nr_of_nodes^2), nrow = nr_of_nodes, ncol = nr_of_nodes)
rownames(A) = nodeID
colnames(A) = nodeID
rownames(A)
data = read.table(file_name, header = F)
data
file_name
data = read.table(file_name, header = F)
data
read.table
? read.table
data = read.table(file_name, header = F)
data
data = read.list(file_name, header = F)
data = read.table(file_name, header = F, fill = TRUE)
data
data = read.table(file_name, header = F)
data
nodeID
data = read.table(file_name, header = F)
nodeID
Tmx = A
nodes_number = sqrt(length(A))
nodes_number
diet = numeric(nodes_number)
for (node in 1:nodes_number){
diet[node] = sum(Tmx[node,])
}
sou = which(diet==0) #which=position of the certain values.
names(sou) = nodeID[sou] #names=names the coloumns/rows
dietary_ratio = A
nodes_number = sqrt(length(A))
for (predator in 1:nodes_number){
for (prey in 1:nodes_number)
if (dietary_ratio[predator,prey] != 0)
dietary_ratio[predator,prey] = A[predator,prey]/sum(A[predator,])
}
? solve
intake_ratio = A
nodes_number = sqrt(length(A))
for (predator in 1:nodes_number){
for (prey in 1:nodes_number)
if (intake_ratio[predator,prey] != 0)
intake_ratio[predator,prey] = A[predator,prey]/sum(A[predator,])
}
nodes_number
intake_ratio
readEdgelist('edgelist_web_1.csv')
data = read.table(file_name, header = F)
nodeID = levels(factor(c(as.character(data[,1]), as.character(data[,2]))))
nodeID = levels(factor(c(as.character(data[,1]), as.character(data[,2]))))
readEdgelist('edgelist_web_1.csv')
data = read.table(file_name, header = F)
data
nodeID = levels(factor(c(as.character(data[,1]), as.character(data[,2]))))
data = read.table(file_name, header = T)
data
data = read.table(file_name, header = F)
data
data = read.table(file_name, header = T)
nodeID = levels(factor(c(as.character(data[,1]), as.character(data[,2]))))
data[,1]
data[,2]
data
? read.table
readEdgelist('edgelist_web_1.csv')
data = read.table(file_name, header = T, sep = ",")
nodeID = levels(factor(c(as.character(data[,1]), as.character(data[,2]))))
nodeID
data
readEdgelist('edgelist_web_1.csv')
data = read.table(file_name, header = T, sep = ",")
nodeID = levels(factor(c(as.character(data[,1]), as.character(data[,2]))))
nodeID
length(nodeID)
nr_of_nodes = length(nodeID)
A = matrix(rep(0, nr_of_nodes^2), nrow = nr_of_nodes, ncol = nr_of_nodes)
rownames(A) = nodeID
colnames(A) = nodeID
for (node in 1:length(data[,1])){
A[as.character(data[node,2]), as.character(data[node,1])] = data[node,3]
}
for (node in 1:nr_of_nodes){
A[node,node] = 0
}
readEdgelist('edgelist_web_1.csv')
source('../readEdgelist.r')
readEdgelist('edgelist_web_1.csv')
A2 = readEdgelist('edgelist_web_1.csv')
A2
data = read.table(file_name, header = T, sep = ",")
nodeID = levels(factor(c(as.character(data[,1]), as.character(data[,2]))))
nr_of_nodes = length(nodeID)
A = matrix(rep(0, nr_of_nodes^2), nrow = nr_of_nodes, ncol = nr_of_nodes)
rownames(A) = nodeID
colnames(A) = nodeID
for (node in 1:length(data[,1])){
A[as.character(data[node,2]), as.character(data[node,1])] = data[node,3]
}
for (node in 1:nr_of_nodes){
A[node,node] = 0
}
source('../readEdgelist.r')
readEdgelist('edgelist_web_1.csv')
A = readEdgelist('edgelist_web_1.csv')
source('trophicPosition.r')
TP = trophicPosition(A)
TP
TP = trophicPosition(A)
A
intake_ratio = A
nodes_number = sqrt(length(A))
for (predator in 1:nodes_number){
for (prey in 1:nodes_number)
if (intake_ratio[predator,prey] != 0)
intake_ratio[predator,prey] = A[predator,prey]/sum(A[predator,])
}
intake_ratio
intake_ratio = A
nodes_number = sqrt(length(A))
for (predator in 1:nodes_number){
for (prey in 1:nodes_number)
if (intake_ratio[predator,prey] != 0)
intake_ratio[predator,prey] = A[predator,prey]/sum(A[predator,])
}
intake_ratio
intake_tot = numeric(nodes_number)
for (predator in 1:nodes_number){
intake_tot[predator] = sum(intake_ratio[predator,])
}
intake_tot
intake_tot = numeric(nodes_number)
for (predator in 1:nodes_number){
intake_tot[predator] = sum(intake_ratio[predator,])
}
intake_tot
TP
intake_ratio = A
nodes_number = sqrt(length(A))
for (predator in 1:nodes_number){
for (prey in 1:nodes_number)
if (intake_ratio[predator,prey] != 0)
intake_ratio[predator,prey] = A[predator,prey]/sum(A[predator,])
}
intake_tot = numeric(nodes_number)
for (predator in 1:nodes_number){
intake_tot[predator] = sum(intake_ratio[predator,])
}
autotrophs = which(intake_tot == 0)
names(autotrophs) = nodeID[autotrophs]
names(autotrophs)
heterotrophs_matrix
intake_ratio = A
nodes_number = sqrt(length(A))
for (predator in 1:nodes_number){
for (prey in 1:nodes_number)
if (intake_ratio[predator,prey] != 0)
intake_ratio[predator,prey] = A[predator,prey]/sum(A[predator,])
}
intake_tot = numeric(nodes_number)
for (predator in 1:nodes_number){
intake_tot[predator] = sum(intake_ratio[predator,])
}
autotrophs = which(intake_tot == 0)
names(autotrophs) = nodeID[autotrophs]
heterotrophs_matrix = intake_ratio
for (autotroph in 1:length(autotrophs)) {
heterotrophs_matrix = heterotrophs_matrix[-which(rownames(heterotrophs_matrix)==names(autotrophs[autotroph])), ]
heterotrophs_matrix = heterotrophs_matrix[,-which(colnames(heterotrophs_matrix)==names(autotrophs[autotroph]))]
}
heterotrophs_matrix
diagonal_matrix = matrix(rep(0,(nodes_number-length(autotrophs))^2), nrow = (nodes_number-length(autotrophs)), ncol = (nodes_number-length(autotrophs)))
for (node in 1:(nodes_number-length(autotrophs)))
diagonal_matrix[node,node] = 1
diagonal_matrix
solution = rep(1, (nodes_number-length(autotrophs)))
TP = solve((diagonal_matrix-intake_ratio_heterotrophs),solution)
intake_ratio = A
nodes_number = sqrt(length(A))
for (predator in 1:nodes_number){
for (prey in 1:nodes_number)
if (intake_ratio[predator,prey] != 0)
intake_ratio[predator,prey] = A[predator,prey]/sum(A[predator,])
}
intake_tot = numeric(nodes_number)
for (predator in 1:nodes_number){
intake_tot[predator] = sum(intake_ratio[predator,])
}
autotrophs = which(intake_tot == 0)
names(autotrophs) = nodeID[autotrophs]
intake_ratio_heterotrophs = intake_ratio
for (autotroph in 1:length(autotrophs)) {
intake_ratio_heterotrophs = intake_ratio_heterotrophs[-which(rownames(intake_ratio_heterotrophs)==names(autotrophs[autotroph])), ]
intake_ratio_heterotrophs = intake_ratio_heterotrophs[,-which(colnames(intake_ratio_heterotrophs)==names(autotrophs[autotroph]))]
}
diagonal_matrix = matrix(rep(0,(nodes_number-length(autotrophs))^2), nrow = (nodes_number-length(autotrophs)), ncol = (nodes_number-length(autotrophs)))
for (node in 1:(nodes_number-length(autotrophs)))
diagonal_matrix[node,node] = 1
solution = rep(1, (nodes_number-length(autotrophs)))
TP = solve((diagonal_matrix-intake_ratio_heterotrophs),solution)
TP
diagonal_matrix
intake_ratio_heterotrophs
diagonal_matrix-intake_ratio_heterotrophs
solution
length(solutions)
length(solution)
A
diag(A)
diag(A)
intake_tot = numeric(nodes_number)
for (predator in 1:nodes_number){
intake_tot[predator] = sum(intake_ratio[predator,])
}
intake_tot
autotrophs
intake_ratio_heterotrophs = intake_ratio
for (autotroph in 1:length(autotrophs)) {
intake_ratio_heterotrophs = intake_ratio_heterotrophs[-which(rownames(intake_ratio_heterotrophs)==names(autotrophs[autotroph])), ]
intake_ratio_heterotrophs = intake_ratio_heterotrophs[,-which(colnames(intake_ratio_heterotrophs)==names(autotrophs[autotroph]))]
}
diagonal_matrix
solution = rep(1, (nodes_number-length(autotrophs)))
TP = solve((diagonal_matrix-intake_ratio_heterotrophs),solution)
TP
(diagonal_matrix-intake_ratio_heterotrophs)''
t((diagonal_matrix-intake_ratio_heterotrophs))
(diagonal_matrix-intake_ratio_heterotrophs)
TP = solve((diagonal_matrix-intake_ratio_heterotrophs),solution)
TP
TP
diagonal_matrix-intake_ratio_heterotrophs
write.csv(diagonal_matrix-intake_ratio_heterotrophs, file = 'R_matrix.csv')
write.csv(diagonal_matrix-intake_ratio_heterotrophs, file = 'R_matrix.csv', col.names = F, row.names = F)
write.csv(diagonal_matrix-intake_ratio_heterotrophs, file = 'R_matrix.csv', header = F, row.names = F)
write.table(diagonal_matrix-intake_ratio_heterotrophs, file = 'R_matrix.csv', col.names = F, row.names = F)
write.table(diagonal_matrix-intake_ratio_heterotrophs, file = 'R_matrix.csv', col.names = F, row.names = F, sep = ",")
TP
TP = trophicPosition(A)
TP
TP = trophicPosition(A) + 1
TP
