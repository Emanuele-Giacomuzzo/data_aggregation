five<-read.csv()
five<-read.csv(file=file.choose())
six<-read.csv(file=file.choose())
seven<-read.csv(file=file.choose())
eight<-read.csv(file=file.choose())
nine<-read.csv(file=file.choose())
str(five)
View(five)
str(five)
View(five)
five<-read.csv(file=file.choose())
View(five)
five<-read.csv(file=file.choose())
a<-read.csv(file=file.choose())
View(a)
b<-read.csv(file=file.choose())
View(b)
c<-read.csv(file=file.choose())
View(c)
View(c)
five<-read.csv(file=file.choose())
View(five)
five<-read.csv(file=file.choose())
six<-read.csv(file=file.choose())
eight<-read.csv(file=file.choose())
nine<-read.csv(file=file.choose())
str(five)
View(six)
View(a)
View(a)
View(five)
View(six)
View(seven)
View(nine)
View(six)
View(seven)
View(five)
View(six)
six<-read.csv(file=file.choose())
View(six)
View(seven)
seven<-read.csv(file=file.choose())
View(seven)
eight<-read.csv(file=file.choose())
View(eight)
View(nine)
#check that what you have in your dataset is correct ahaha (I didn't get it right at first maronne mi)
newdataset<-rbind(five,six)
View(newdataset)
#check that what you have in your dataset is correct ahaha (I didn't get it right at first maronne mi)
newdataset<-rbind(five,six,seven,eight,nine)
View(newdataset)
summary(object=newdataset)
sd(x=bgdata, na.rm=TRUE) #standard deviation
sd(x=bgdata$Ozone, na.rm=TRUE) #standard deviation
sd(x=newdataset, na.rm=TRUE) #standard deviation
sd(x=newdataset$Ozone, na.rm=TRUE) #standard deviation
min(x=newdataset$Ozone, na.rm=TRUE)
max(x=newdataset$Ozone, na.rm=TRUE)
View(newdataset)
temperature.mean<-c(1,7,10)
temperature.mean
summary(object=newdataset)
sd(x=newdataset$Ozone, na.rm=TRUE) #standard deviation
install.packages(modMax)
install.packages(modMax)
install.packages("modMax")
pwd
erdos.renyi.game(10, 0.5, type = "gnp", directed = TRUE, loops = FALSE)
library(igraph)
erdos.renyi.game(10, 0.5, type = "gnp", directed = TRUE, loops = FALSE)
plot(G)
iplot(G)
G = erdos.renyi.game(10, 0.5, type = "gnp", directed = TRUE, loops = FALSE)
iplot(G)
plot.igraph(G)
library(igraph)
library(igraph)
source("/Users/ema/github/data_aggregation/r/food_web_tools/trophic_position/trophic_position.r")
source('/Users/ema/github/data_aggregation/r/food_web_tools/trophic_position/trophic_position.r')
library(igraph)
library(igraph)
source('/Users/ema/github/data_aggregation/r/food_web_tools/trophic_position/trophic_position.r')
setwd('/Users/ema/github/data_aggregation/r/food_web_tools/trophic_position')
source('trophic_position.r')
source('/Users/ema/github/data_aggregation/r/food_web_tools/trophic_position/trophic_position.r')
setwd('/Users/ema/github/data_aggregation')
setwd('/Users/ema/github/data_aggregation/r')
setwd('/Users/ema/github/data_aggregation/r/food_web_tools/trophic_position/trophic_position.r')
source('/Users/ema/github/data_aggregation/r/')
source('/Users/ema/github/data_aggregation/r')
setwd('/Users/ema/github/data_aggregation/r/food_web_tools/trophic_position')
getwd()
ls
list.files()
source('/Users/ema/github/data_aggregation/r/food_web_tools/trophic_position/trophicPosition.r')
source('/Users/ema/github/data_aggregation/r/food_web_tools/trophic_position/trophicPosition.r')
G = erdos.renyi.game(10, 0.5, type = "gnp", directed = TRUE, loops = FALSE)
plot.igraph(G)
A = as_adjacency_matrix(G)
View(A)
library(Matrix)
A = as_adjacency_matrix(G,sparse=TRUE)
View(A)
View(A)
as_adjacency_matrix(g,attr = "weight",sparse = T)
as_adjacency_matrix(G,attr = "weight",sparse = T)
A = as_adjacency_matrix(G,sparse=T)
A
trophicPostion(A)
trophicPosition(A)
library(igraph)
library(Matrix)
source('/Users/ema/github/data_aggregation/r/food_web_tools/trophic_position/trophicPosition.r')
G = erdos.renyi.game(10, 0.5, type = "gnp", directed = TRUE, loops = FALSE)
plot.igraph(G)
A = as_adjacency_matrix(G,sparse=T)
trophicPosition(A)
length(A)
numnode = sqrt(length(mx))
numnode = sqrt(length(A
))
library(igraph)
library(Matrix)
source('/Users/ema/github/data_aggregation/r/food_web_tools/trophic_position/trophicPosition.r')
G = erdos.renyi.game(10, 0.5, type = "gnp", directed = TRUE, loops = FALSE)
plot.igraph(G)
A = as_adjacency_matrix(G,sparse=T)
trophicPosition(A)
