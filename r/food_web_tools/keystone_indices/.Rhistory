node.cols <- brewer.pal(max(c(3, partition)),"Pastel1")[partition]
node.cols
node.cols <- brewer.pal(max(c(3, partition)),"Pastel1")[partition]
plot.igraph(simplify(G),
#main= "Original food web",
vertex.label=NA,
vertex.size=2,
vertex.color = node.cols,
#edge.width = E(G)$weight,
edge.arrow.size=.25,
layout=plotting_layout,
axes=TRUE,
xlim = c(0,1),
ylim=c(0,3),
ylab="Trophic position (TP)",
rescale=F,
asp=0)
max(partition)
print('There have been found' max(3))
print('There have been found', max(3))
print('There have been found', max(G))
print(cat('There have been found', max(G)))
print(cat('There have been found'))
print(cat('There have been found', 'hi'))
print(paste0('There have been found', 'hi'))
print(paste0('There have been found', max(partitions), 'partitions'))
A=1
Z=1
print(paste0('There have been found', Z , 'partitions'))
print(paste0('There have been found ', Z , ' partitions'))
print(paste0('There have been found ', max(partition) , ' partitions'))
A <- get.adjacency(G,sparse=F) #Adjacency (i and j are inverted)
A <- t(A)
rownames(A) <- 1:nrow(A)
colnames(A) <- 1:nrow(A)
partition <- leiden(A)
print(paste0('There have been found ', max(partition) , ' partitions'))
A <- get.adjacency(G,sparse=F) #Adjacency (i and j are inverted)
A <- t(A)
rownames(A) <- 1:nrow(A)
colnames(A) <- 1:nrow(A)
partition <- leiden(A)
print(paste0('There have been found ', max(partition) , ' partitions'))
A <- get.adjacency(G,sparse=F) #Adjacency (i and j are inverted)
A <- t(A)
rownames(A) <- 1:nrow(A)
colnames(A) <- 1:nrow(A)
partition <- leiden(A)
print(paste0('There have been found ', max(partition) , ' partitions'))
A <- get.adjacency(G,sparse=F) #Adjacency (i and j are inverted)
A <- t(A)
rownames(A) <- 1:nrow(A)
colnames(A) <- 1:nrow(A)
partition <- leiden(A)
print(paste0('There have been found ', max(partition) , ' partitions'))
A <- get.adjacency(G,sparse=F) #Adjacency (i and j are inverted)
A <- t(A)
rownames(A) <- 1:nrow(A)
colnames(A) <- 1:nrow(A)
partition <- leiden(A)
print(paste0('There have been found ', max(partition) , ' partitions'))
A <- get.adjacency(G,sparse=F) #Adjacency (i and j are inverted)
A <- t(A)
rownames(A) <- 1:nrow(A)
colnames(A) <- 1:nrow(A)
partition <- leiden(A)
print(paste0('There have been found ', max(partition) , ' partitions'))
A <- get.adjacency(G,sparse=F) #Adjacency (i and j are inverted)
A <- t(A)
rownames(A) <- 1:nrow(A)
colnames(A) <- 1:nrow(A)
partition <- leiden(A)
print(paste0('There have been found ', max(partition) , ' partitions'))
A <- get.adjacency(G,sparse=F) #Adjacency (i and j are inverted)
A <- t(A)
rownames(A) <- 1:nrow(A)
colnames(A) <- 1:nrow(A)
partition <- leiden(A)
print(paste0('There have been found ', max(partition) , ' partitions'))
A <- get.adjacency(G,sparse=F) #Adjacency (i and j are inverted)
A <- t(A)
rownames(A) <- 1:nrow(A)
colnames(A) <- 1:nrow(A)
partition <- leiden(A)
print(paste0('There have been found ', max(partition) , ' partitions'))
partition
plot.igraph(simplify(G),
#main= "Original food web",
vertex.label=NA,
vertex.size=2,
vertex.color = node.cols,
#edge.width = E(G)$weight,
edge.arrow.size=.25,
layout=plotting_layout,
axes=TRUE,
xlim = c(0,1),
ylim=c(0,3),
ylab="Trophic position (TP)",
rescale=F,
asp=0)
rm(list = ls()); cat("\014"); setwd('/Users/ema/Github/Data_aggregation/R_files')
rm(list = ls()); cat("\014"); setwd('/Users/ema/Github/Data_aggregation/R_files')
library(ggplot2)
library(tibble)
library(plyr)
library(igraph)
library(NetIndices)
library(dplyr)
library(leiden)
library(RColorBrewer)
edge_list <- read.delim('../data/Napoli_edgelist_for_R.txt', header = FALSE)
links <- edge_list %>% select(V1,V2)
weights <- edge_list %>% select(V3)
G <- graph_from_edgelist(as.matrix(links)) #You need to invert i and j
E(G)$weight <- as.matrix(weights)
TP <- as.matrix(read.csv('../data/variables/Napoli_TP.txt', header = FALSE))
V(G)$TP <- TP[,1]
#membership <- read.csv('../variables/membership.txt',header = FALSE)
#Plot
plotting_layout <- matrix( nrow=length(V(G)),ncol=2)
plotting_layout[,1] <- runif(length(V(G)))
plotting_layout[,2] <- TP[,1]
plot.igraph(simplify(G),
#main= "Original food web",
vertex.label=NA,
vertex.size=2,
vertex.color="grey75",
#edge.width = E(G)$weight,
edge.arrow.size=.25,
layout=plotting_layout,
axes=TRUE,
xlim = c(0,1),
ylim=c(0,3),
ylab="Trophic position (TP)",
rescale=F,
asp=0)
#Node strength
wDC <- strength(G, vids = V(G), mode = "all", loops = TRUE)
nwDC <- wDC/(nrow(TP)-1)
#Density-based modularity
A <- get.adjacency(G,sparse=F) #Adjacency (i and j are inverted)
A <- t(A)
rownames(A) <- 1:nrow(A)
colnames(A) <- 1:nrow(A)
partition <- leiden(A)
print(paste0('There have been found ', max(partition) , ' partitions'))
node.cols <- brewer.pal(max(c(3, partition)),"Pastel1")[partition]
plot.igraph(simplify(G),
#main= "Original food web",
vertex.label=NA,
vertex.size=2,
vertex.color = node.cols,
#edge.width = E(G)$weight,
edge.arrow.size=.25,
layout=plotting_layout,
axes=TRUE,
xlim = c(0,1),
ylim=c(0,3),
ylab="Trophic position (TP)",
rescale=F,
asp=0)
rm(list = ls()); cat("\014"); setwd('/Users/ema/Github/Data_aggregation/R_files')
library(ggplot2)
library(tibble)
library(plyr)
library(igraph)
library(NetIndices)
library(dplyr)
library(leiden)
library(RColorBrewer)
edge_list <- read.delim('../data/Napoli_edgelist_for_R.txt', header = FALSE)
links <- edge_list %>% select(V1,V2)
weights <- edge_list %>% select(V3)
G <- graph_from_edgelist(as.matrix(links)) #You need to invert i and j
E(G)$weight <- as.matrix(weights)
TP <- as.matrix(read.csv('../data/variables/Napoli_TP.txt', header = FALSE))
V(G)$TP <- TP[,1]
#membership <- read.csv('../variables/membership.txt',header = FALSE)
#Plot
plotting_layout <- matrix( nrow=length(V(G)),ncol=2)
plotting_layout[,1] <- runif(length(V(G)))
plotting_layout[,2] <- TP[,1]
plot.igraph(simplify(G),
#main= "Original food web",
vertex.label=NA,
vertex.size=2,
vertex.color="grey75",
#edge.width = E(G)$weight,
edge.arrow.size=.25,
layout=plotting_layout,
axes=TRUE,
xlim = c(0,1),
ylim=c(0,3),
ylab="Trophic position (TP)",
rescale=F,
asp=0)
#Node strength
wDC <- strength(G, vids = V(G), mode = "all", loops = TRUE)
nwDC <- wDC/(nrow(TP)-1)
#Density-based modularity
A <- get.adjacency(G,sparse=F) #Adjacency (i and j are inverted)
A <- t(A)
rownames(A) <- 1:nrow(A)
colnames(A) <- 1:nrow(A)
partition <- leiden(A)
print(paste0('There have been found ', max(partition) , ' partitions'))
node.cols <- brewer.pal(max(c(3, partition)),"Pastel1")[partition]
plot.igraph(simplify(G),
#main= "Original food web",
vertex.label=NA,
vertex.size=2,
vertex.color = node.cols,
#edge.width = E(G)$weight,
edge.arrow.size=.25,
layout=plotting_layout,
axes=TRUE,
xlim = c(0,1),
ylim=c(0,3),
ylab="Trophic position (TP)",
rescale=F,
asp=0)
rm(list = ls()); cat("\014"); setwd('/Users/ema/Github/Data_aggregation/R_files')
library(ggplot2)
library(tibble)
library(plyr)
library(igraph)
library(NetIndices)
library(dplyr)
library(leiden)
library(RColorBrewer)
edge_list <- read.delim('../data/Napoli_edgelist_for_R.txt', header = FALSE)
links <- edge_list %>% select(V1,V2)
weights <- edge_list %>% select(V3)
G <- graph_from_edgelist(as.matrix(links)) #You need to invert i and j
E(G)$weight <- as.matrix(weights)
TP <- as.matrix(read.csv('../data/variables/Napoli_TP.txt', header = FALSE))
V(G)$TP <- TP[,1]
#membership <- read.csv('../variables/membership.txt',header = FALSE)
#Plot
plotting_layout <- matrix( nrow=length(V(G)),ncol=2)
plotting_layout[,1] <- runif(length(V(G)))
plotting_layout[,2] <- TP[,1]
plot.igraph(simplify(G),
#main= "Original food web",
vertex.label=NA,
vertex.size=2,
vertex.color="grey75",
#edge.width = E(G)$weight,
edge.arrow.size=.25,
layout=plotting_layout,
axes=TRUE,
xlim = c(0,1),
ylim=c(0,3),
ylab="Trophic position (TP)",
rescale=F,
asp=0)
#Node strength
wDC <- strength(G, vids = V(G), mode = "all", loops = TRUE)
nwDC <- wDC/(nrow(TP)-1)
#Density-based modularity
A <- get.adjacency(G,sparse=F) #Adjacency (i and j are inverted)
A <- t(A)
rownames(A) <- 1:nrow(A)
colnames(A) <- 1:nrow(A)
partition <- leiden(A)
print(paste0('There have been found ', max(partition) , ' partitions'))
node.cols <- brewer.pal(max(c(3, partition)),"Pastel1")[partition]
plot.igraph(simplify(G),
#main= "Original food web",
vertex.label=NA,
vertex.size=2,
vertex.color = node.cols,
#edge.width = E(G)$weight,
edge.arrow.size=.25,
layout=plotting_layout,
axes=TRUE,
xlim = c(0,1),
ylim=c(0,3),
ylab="Trophic position (TP)",
rescale=F,
asp=0)
rm(list = ls()); cat("\014"); setwd('/Users/ema/Github/Data_aggregation/R_files')
library(ggplot2)
library(tibble)
library(plyr)
library(igraph)
library(NetIndices)
library(dplyr)
library(leiden)
library(RColorBrewer)
edge_list <- read.delim('../data/Napoli_edgelist_for_R.txt', header = FALSE)
links <- edge_list %>% select(V1,V2)
weights <- edge_list %>% select(V3)
G <- graph_from_edgelist(as.matrix(links)) #You need to invert i and j
E(G)$weight <- as.matrix(weights)
TP <- as.matrix(read.csv('../data/variables/Napoli_TP.txt', header = FALSE))
V(G)$TP <- TP[,1]
#membership <- read.csv('../variables/membership.txt',header = FALSE)
#Plot
plotting_layout <- matrix( nrow=length(V(G)),ncol=2)
plotting_layout[,1] <- runif(length(V(G)))
plotting_layout[,2] <- TP[,1]
plot.igraph(simplify(G),
#main= "Original food web",
vertex.label=NA,
vertex.size=2,
vertex.color="grey75",
#edge.width = E(G)$weight,
edge.arrow.size=.25,
layout=plotting_layout,
axes=TRUE,
xlim = c(0,1),
ylim=c(0,3),
ylab="Trophic position (TP)",
rescale=F,
asp=0)
#Node strength
wDC <- strength(G, vids = V(G), mode = "all", loops = TRUE)
nwDC <- wDC/(nrow(TP)-1)
#Density-based modularity
A <- get.adjacency(G,sparse=F) #Adjacency (i and j are inverted)
A <- t(A)
rownames(A) <- 1:nrow(A)
colnames(A) <- 1:nrow(A)
partition <- leiden(A)
node.cols <- brewer.pal(max(c(3, partition)),"Pastel1")[partition]
plot.igraph(simplify(G),
#main= "Original food web",
vertex.label=NA,
vertex.size=2,
vertex.color = node.cols,
#edge.width = E(G)$weight,
edge.arrow.size=.25,
layout=plotting_layout,
axes=TRUE,
xlim = c(0,1),
ylim=c(0,3),
ylab="Trophic position (TP)",
rescale=F,
asp=0)
print(paste0('There have been found ', max(partition) , ' partitions'))
rm(list = ls()); cat("\014"); setwd('/Users/ema/Github/Data_aggregation/R_files')
library(ggplot2)
library(tibble)
library(plyr)
library(igraph)
library(NetIndices)
library(dplyr)
library(leiden)
library(RColorBrewer)
edge_list <- read.delim('../data/Napoli_edgelist_for_R.txt', header = FALSE)
links <- edge_list %>% select(V1,V2)
weights <- edge_list %>% select(V3)
G <- graph_from_edgelist(as.matrix(links)) #You need to invert i and j
E(G)$weight <- as.matrix(weights)
TP <- as.matrix(read.csv('../data/variables/Napoli_TP.txt', header = FALSE))
V(G)$TP <- TP[,1]
#membership <- read.csv('../variables/membership.txt',header = FALSE)
#Plot
plotting_layout <- matrix( nrow=length(V(G)),ncol=2)
plotting_layout[,1] <- runif(length(V(G)))
plotting_layout[,2] <- TP[,1]
plot.igraph(simplify(G),
#main= "Original food web",
vertex.label=NA,
vertex.size=2,
vertex.color="grey75",
#edge.width = E(G)$weight,
edge.arrow.size=.25,
layout=plotting_layout,
axes=TRUE,
xlim = c(0,1),
ylim=c(0,3),
ylab="Trophic position (TP)",
rescale=F,
asp=0)
#Node strength
wDC <- strength(G, vids = V(G), mode = "all", loops = TRUE)
nwDC <- wDC/(nrow(TP)-1)
#Density-based modularity
A <- get.adjacency(G,sparse=F) #Adjacency (i and j are inverted)
A <- t(A)
rownames(A) <- 1:nrow(A)
colnames(A) <- 1:nrow(A)
partition <- leiden(A)
node.cols <- brewer.pal(max(c(3, partition)),"Pastel1")[partition]
plot.igraph(simplify(G),
#main= "Original food web",
vertex.label=NA,
vertex.size=2,
vertex.color = node.cols,
#edge.width = E(G)$weight,
edge.arrow.size=.25,
layout=plotting_layout,
axes=TRUE,
xlim = c(0,1),
ylim=c(0,3),
ylab="Trophic position (TP)",
rescale=F,
asp=0)
print(paste0('There have been found ', max(partition) , ' partitions'))
edge_list <- read.delim('../data/Napoli_edgelist_for_R.txt', header = FALSE)
links <- edge_list %>% select(V1,V2)
weights <- edge_list %>% select(V3)
G <- graph_from_edgelist(as.matrix(links)) #You need to invert i and j
E(G)$weight <- as.matrix(weights)
TP <- as.matrix(read.csv('../data/variables/Napoli_TP.txt', header = FALSE))
V(G)$TP <- TP[,1]
#membership <- read.csv('../variables/membership.txt',header = FALSE)
#Plot
plotting_layout <- matrix( nrow=length(V(G)),ncol=2)
plotting_layout[,1] <- runif(length(V(G)))
plotting_layout[,2] <- TP[,1]
plot.igraph(simplify(G),
#main= "Original food web",
vertex.label=NA,
vertex.size=2,
vertex.color="grey75",
#edge.width = E(G)$weight,
edge.arrow.size=.25,
layout=plotting_layout,
axes=TRUE,
xlim = c(0,1),
ylim=c(0,3),
ylab="Trophic position (TP)",
rescale=F,
asp=0)
edge_list <- read.delim('../data/Napoli_edgelist_for_R.txt', header = FALSE)
links <- edge_list %>% select(V1,V2)
weights <- edge_list %>% select(V3)
G <- graph_from_edgelist(as.matrix(links)) #You need to invert i and j
E(G)$weight <- as.matrix(weights)
getwd()
getwd()
data<-read.table("web.txt", header=F)
getwd()
data<-read.table("edgelist_loopless", header=F)
nodeID<-levels(factor(c(as.character(data[,1]),as.character(data[,2]))))
numnode<-length(nodeID)
mx<-matrix(rep(0,numnode^2),nrow=numnode,ncol=numnode)
rownames(mx)<-nodeID
colnames(mx)<-nodeID
for (i in 1:length(data[,1])){
mx[as.character(data[i,1]),as.character(data[i,2])]<-1
}
getwd()
getwd()
data<-read.table("edgelist_loopless", header=F)
getwd()
data<-read.table("edgelist_loopless.txt", header=F)
getwd()
setwd(..)
setwd('/Users/ema/github/data_aggregation/r_files/food_web_tools/keystone_indices')
setwd('/Users/ema/github/data_aggregation/r_files/food_web_tools/keystone_indices')
data<-read.table("edgelist_loopless.txt", header=F)
setwd('/Users/ema/github/data_aggregation/r_files/food_web_tools/keystone_indices')
data<-read.table("edgelist_loopless.txt", header=F)
setwd('/Users/ema/github/data_aggregation/r_files/food_web_tools/keystone_indices')
data<-read.table("edgelist_loopless.txt", header=F)
nodeID<-levels(factor(c(as.character(data[,1]),as.character(data[,2]))))
numnode<-length(nodeID)
mx<-matrix(rep(0,numnode^2),nrow=numnode,ncol=numnode)
rownames(mx)<-nodeID
colnames(mx)<-nodeID
for (i in 1:length(data[,1])){
mx[as.character(data[i,1]),as.character(data[i,2])]<-1
}
setwd('/Users/ema/github/data_aggregation/r_files/food_web_tools/keystone_indices')
data<-read.table("edgelist_loopless.txt", header=F)
nodeID<-levels(factor(c(as.character(data[,1]),as.character(data[,2]))))
numnode<-length(nodeID)
mx<-matrix(rep(0,numnode^2),nrow=numnode,ncol=numnode)
rownames(mx)<-nodeID
colnames(mx)<-nodeID
for (i in 1:length(data[,1])){
mx[as.character(data[i,1]),as.character(data[i,2])]<-1
}
prey<-numeric(numnode)
for (i in 1:numnode) prey[i]<-sum(mx[,i])
predator<-numeric(numnode)
for (i in 1:numnode) predator[i]<-sum(mx[i,])
coef<-matrix(rep(0,numnode^2),nrow=numnode,ncol=numnode)
for (i in 1:numnode) {coef[i,]<-prey*mx[i,]}
for (i in 1:numnode) for (j in 1:numnode) {if (coef[i,j]!=0) coef[i,j]<-1/coef[i,j]}
vw<-numeric(numnode)
for (i in 1:numnode) vw[i]<--1*sum(coef[i,])
for (i in 1:numnode) coef[i,i]<-coef[i,i]+(-1)
kbu<-solve(coef,vw)
for (i in 1:numnode) {coef[i,]<-predator*mx[,i]}
for (i in 1:numnode) for (j in 1:numnode) {if (coef[i,j]!=0) coef[i,j]<-1/coef[i,j]}
vw<-numeric(numnode)
for (i in 1:numnode) vw[i]<--1*sum(coef[i,])
for (i in 1:numnode) coef[i,i]<-coef[i,i]+(-1)
ktd<-solve(coef,vw)
for (i in 1:numnode) {coef[i,]<-prey*mx[i,]}
for (i in 1:numnode) for (j in 1:numnode) {if (coef[i,j]!=0) coef[i,j]<-1/coef[i,j]}
vw<-numeric(numnode)
for (i in 1:numnode) vw[i]<-sum(coef[i,])
kdir<-vw
for (i in 1:numnode) {coef[i,]<-kbu*coef[i,]}
kindir<-numeric(numnode)
for (i in 1:numnode) {kindir[i]<-sum(coef[i,])}
for (i in 1:numnode) {coef[,i]<-predator*mx[,i]}
for (i in 1:numnode) for (j in 1:numnode) {if (coef[i,j]!=0) coef[i,j]<-1/coef[i,j]}
vw<-numeric(numnode)
for (i in 1:numnode) vw[i]<-sum(coef[,i])
kdir<-kdir+vw
for (i in 1:numnode) {coef[,i]<-ktd*coef[,i]}
for (i in 1:numnode) {kindir[i]<-kindir[i]+sum(coef[,i])}
k<-kbu+ktd
resu<-data.frame(nodeID,k,kbu,ktd,kdir,kindir)
resu
