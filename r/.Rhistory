five<-read.csv()
five<-read.csv(file=file.choose())
six<-read.csv(file=file.choose())
seven<-read.csv(file=file.choose())
eight<-read.csv(file=file.choose())
nine<-read.csv(file=file.choose())
str(five)
View(five)
str(five)
View(five)
five<-read.csv(file=file.choose())
View(five)
five<-read.csv(file=file.choose())
a<-read.csv(file=file.choose())
View(a)
b<-read.csv(file=file.choose())
View(b)
c<-read.csv(file=file.choose())
View(c)
View(c)
five<-read.csv(file=file.choose())
View(five)
five<-read.csv(file=file.choose())
six<-read.csv(file=file.choose())
eight<-read.csv(file=file.choose())
nine<-read.csv(file=file.choose())
str(five)
View(six)
View(a)
View(a)
View(five)
View(six)
View(seven)
View(nine)
View(six)
View(seven)
View(five)
View(six)
six<-read.csv(file=file.choose())
View(six)
View(seven)
seven<-read.csv(file=file.choose())
View(seven)
eight<-read.csv(file=file.choose())
View(eight)
View(nine)
#check that what you have in your dataset is correct ahaha (I didn't get it right at first maronne mi)
newdataset<-rbind(five,six)
View(newdataset)
#check that what you have in your dataset is correct ahaha (I didn't get it right at first maronne mi)
newdataset<-rbind(five,six,seven,eight,nine)
View(newdataset)
summary(object=newdataset)
sd(x=bgdata, na.rm=TRUE) #standard deviation
sd(x=bgdata$Ozone, na.rm=TRUE) #standard deviation
sd(x=newdataset, na.rm=TRUE) #standard deviation
sd(x=newdataset$Ozone, na.rm=TRUE) #standard deviation
min(x=newdataset$Ozone, na.rm=TRUE)
max(x=newdataset$Ozone, na.rm=TRUE)
View(newdataset)
temperature.mean<-c(1,7,10)
temperature.mean
summary(object=newdataset)
sd(x=newdataset$Ozone, na.rm=TRUE) #standard deviation
install.packages(modMax)
install.packages(modMax)
install.packages("modMax")
pwd
library(igraph)
make_empty_graph(n = 0, directed = TRUE)
make_empty_graph(n = 5, directed = TRUE)
G = make_empty_graph(n = 5, directed = TRUE)
G
plot(G)
G = make_empty_graph(n = 5, directed = TRUE) %>%
add_edges(c(1,2, 2,3, 3,4, 4,5))
plot(G)
G = make_empty_graph(n = 5, directed = TRUE) %>%
add_edges(c(1,3, 2,3, 3,4, 3,5))
plot(G)
G = make_empty_graph(n = 5, directed = TRUE) %>%
add_edges(c(1,3, 2,3, 3,4, 3,5))
plot(G)
plot(G)
plot(G)
plot(G)
plot(G)
plot(G)
plot(G)
plot(G)
plot(G)
plot(G)
G = make_empty_graph(n = 6, directed = TRUE) %>%
add_edges(c(1,3, 2,3, 3,4, 3,5, 3,6))
plot(G)
plot(G)
plot(G)
#IGRAPH
G = make_empty_graph(n = 6, directed = TRUE) %>%
add_edges(c(1,3, 2,3, 3,4, 3,5))
plot(G)
G = make_empty_graph(n = 5, directed = TRUE) %>%
add_edges(c(1,3, 2,3, 3,4, 3,5))
plot(G)
as.matrix(read.csv(/Users/ema/github/data_aggregation/data/ecobase/adjacency_matrices/A_loops_001.txt, header= FALSE)
A = as.matrix(read.csv('/Users/ema/github/data_aggregation/data/ecobase/adjacency_matrices/A_loops_001.txt', header= FALSE)
A = as.matrix(read.csv('/Users/ema/github/data_aggregation/data/ecobase/adjacency_matrices/A_loops_001.txt', header= FALSE)
A = as.matrix(read.csv('/Users/ema/github/data_aggregation/data/ecobase/adjacency_matrices/A_loops_001.txt', header= FALSE)
A = as.matrix(read.csv('/Users/ema/github/data_aggregation/data/ecobase/adjacency_matrices/A_loops_001.txt', header= FALSE))
A = as.matrix(read.csv('/Users/ema/github/data_aggregation/data/ecobase/adjacency_matrices/A_loops_001.txt', header= FALSE))
Tmx = A
nodes_number = sqrt(length(A))
for (predator in 1:nodes_number){
for (prey in 1:nodes_number)
if (Tmx[predator,prey]!=0)
Tmx[predator,prey]<-A[predator,prey]/sum(A[predator,])
}
diet = numeric(nodes_number)
for (node in 1:nodes_number){
diet[node]<-sum(Tmx[node,])
}
sou = which(diet==0) #which=position of the certain values.
names(sou)<-nodeID[sou] #names=names the coloumns/rows
Qmx = Tmx
for (i in 1:length(sou)) {
Qmx = Qmx[-which(rownames(Qmx)==names(sou[i])),] #find the number of row of the species in sou. The minus sign removes the certain coloumn/row.
Qmx = Qmx[,-which(colnames(Qmx)==names(sou[i]))] #find the number of coloumn of the species in sou
}
Imx = matrix(rep(0,(nodes_number-length(sou))^2),nrow=(nodes_number-length(sou)),ncol=(nodes_number-length(sou)))
for (i in 1:(nodes_number-length(sou)))
Imx[i,i]<-1
vw = rep(1, (nodes_number-length(sou))) #repeat 1 for a number of times that is nodes_number-length(sou).
TP = solve((Imx-Qmx),vw) #MMMMMM
names(TP)<-rownames(Qmx)
soutp = sou
for (i in 1:length(soutp))
soutp[i]<-0
TP = c(soutp,TP)
Tmx = A
nodes_number = sqrt(length(A))
for (predator in 1:nodes_number){
for (prey in 1:nodes_number)
if (Tmx[predator,prey]!=0)
Tmx[predator,prey]<-A[predator,prey]/sum(A[predator,])
}
diet = numeric(nodes_number)
for (node in 1:nodes_number){
diet[node]<-sum(Tmx[node,])
}
sou = which(diet==0) #which=position of the certain values.
names(sou)<-nodeID[sou] #names=names the coloumns/rows
A = read.csv('/Users/ema/github/data_aggregation/data/ecobase/adjacency_matrices/A_loops_001.txt')
A
A = as.matrix(read.csv('/Users/ema/github/data_aggregation/data/ecobase/adjacency_matrices/A_loops_001.txt'))
A
A = read.csv('/Users/ema/github/data_aggregation/data/ecobase/adjacency_matrices/A_loops_001.txt',header = F)
A
A = as.matix(read.csv('/Users/ema/github/data_aggregation/data/ecobase/adjacency_matrices/A_loops_001.txt',header = F))
A = as.matrix(read.csv('/Users/ema/github/data_aggregation/data/ecobase/adjacency_matrices/A_loops_001.txt',header = F))
A
A = as.matrix(read.csv('/Users/ema/github/data_aggregation/data/ecobase/adjacency_matrices/A_loops_001.txt',header = F))
A = read.csv('/Users/ema/github/data_aggregation/data/ecobase/adjacency_matrices/A_loops_001.txt',header = F)
A
A = as.matrix(A)
A = read.csv('/Users/ema/github/data_aggregation/data/ecobase/adjacency_matrices/A_loops_001.txt',header = F)
A = as.matrix(A)
G = graph_from_adjacency_matrix(A, mode = "directed", weighted = "true", diag = TRUE)
library(igraph)
A = read.csv('/Users/ema/github/data_aggregation/data/ecobase/adjacency_matrices/A_loops_001.txt',header = F)
A = as.matrix(A)
G = graph_from_adjacency_matrix(A, mode = "directed", weighted = "true", diag = TRUE)
G
plot(G)
plotting_layout <- matrix( nrow=length(V(G)),ncol=2)
plotting_layout[,1] <- runif(length(V(G)))
plotting_layout[,2] <- TP[,1]
TP = read.csv('/Users/ema/github/data_aggregation/data/ecobase/adjacency_matrices/TP_web_1.csv',header = F)
TP = read.csv('/Users/ema/github/data_aggregation/data/ecobase/adjacency_matrices/TP_web_1.csc',header = F)
A = read.csv('/Users/ema/github/data_aggregation/data/ecobase/adjacency_matrices/A_loops_001.txt',header = F)
TP = read.csv('/Users/ema/github/data_aggregation/data/ecobase/adjacency_matrices/TP_web_1.csc', header = F)
TP = read.csv('/Users/ema/github/data_aggregation/r/plotting/TP_web_1.csc', header = F)
TP = read.csv('/Users/ema/github/data_aggregation/r/plotting/TP_web_1.csv', header = F)
TP
TP = as.matrix(TP)
TP
plotting_layout = matrix( nrow=length(V(G)),ncol=2)
plotting_layout[,1] = runif(length(V(G)))
plotting_layout[,2] = TP
plotting_layout
plotting_layout = matrix( nrow=length(V(G)),ncol=2)
plotting_layout[,1] = runif(length(V(G)))
plotting_layout[,2] = TP
plot.igraph(simplify(G),
main= "Original food web",
vertex.label=NA,
vertex.size=2,
vertex.color="grey75",
#edge.width = E(G)$weight,
edge.arrow.size=.25,
layout=plotting_layout,
axes=TRUE,
xlim = c(0,1),
ylim=c(0,3),
ylab="Trophic position (TP)",
rescale=F,
asp=0)
plotting_layout = matrix( nrow=length(V(G)),ncol=2)
plotting_layout[,1] = runif(length(V(G)))
plotting_layout[,2] = TP -1
plot.igraph(simplify(G),
main= "Original food web",
vertex.label=NA,
vertex.size=2,
vertex.color="grey75",
#edge.width = E(G)$weight,
edge.arrow.size=.25,
layout=plotting_layout,
axes=TRUE,
xlim = c(0,1),
ylim=c(0,3),
ylab="Trophic position (TP)",
rescale=F,
asp=0)
Jaccard = read.csv('/Users/ema/github/data_aggregation/data/ecobase/adjacency_matrices/A_loops_001.txt'')
Jaccard = read.csv('/Users/ema/github/data_aggregation/data/ecobase/adjacency_matrices/A_loops_001.txt')
Jaccard = read.csv('/Users/ema/github/data_aggregation/data/ecobase/adjacency_matrices/A_loops_001.txt')
Jaccard
Jaccard = read.csv('/Users/ema/github/data_aggregation/r/plotting/plotting_jaccard_similarity_web_1.csv')
path = paste0('/Users/ema/github/data_aggregation/r/plotting/TP_web_',wen,'.csv')
web = 1
path = paste0('/Users/ema/github/data_aggregation/r/plotting/TP_web_',web,'.csv')
path
path = paste0('/Users/ema/github/data_aggregation/r/plotting/TP_web_',web,'.csv')
TP = read.csv(path, header = F)
TP = as.matrix(TP)
source(addFrontZeros)
source('../addFrontZeros.r')
source('../addFrontZeros')
getwd()
setwd('/Users/ema/github/data_aggregation/r ')
setwd('/Users/ema/github/data_aggregation/r')
library(igraph)
source('../addFrontZeros')
source('addFrontZeros')
source('addFrontZeros.r')
addFrontZeros(web)
path = paste0('/Users/ema/github/data_aggregation/data/ecobase/adjacency_matrices/A_loops_',addFrontZeros(web), '.txt')
path = paste0('/Users/ema/github/data_aggregation/data/ecobase/adjacency_matrices/A_loops_',addFrontZeros(web), '.txt')
A = read.csv(path, header = F)
A = as.matrix(A)
G = graph_from_adjacency_matrix(A, mode = "directed", weighted = "true", diag = TRUE)
plot(G)
path = paste0('/Users/ema/github/data_aggregation/r/plotting/TP_web_',web,'.csv')
TP = read.csv(path, header = F)
TP = as.matrix(TP)
plotting_layout = matrix( nrow=length(V(G)),ncol=2)
plotting_layout[,1] = runif(length(V(G)))
plotting_layout[,2] = TP -1
plot.igraph(simplify(G),
main= "Original food web",
vertex.label=NA,
vertex.size=2,
vertex.color="grey75",
#edge.width = E(G)$weight,
edge.arrow.size=.25,
layout=plotting_layout,
axes=TRUE,
xlim = c(0,1),
ylim=c(0,3),
ylab="Trophic position (TP)",
rescale=F,
asp=0)
Jaccard = read.csv('/Users/ema/github/data_aggregation/r/plotting/plotting_jaccard_similarity_web_1.csv')
Jaccard
