vertex.label.cex=1,
vertex.size=3,
edge.arrow.size=.25,
layout=layout.matrix,
xlim = c(0,1),
ylim=c(0,3),
#axes=TRUE,
#ylab="Trophic position (TP)",
rescale=F,
asp=0)
V(G_jaccard)$color <- gray #V(G_jaccard)
V(G_jaccard)$color <- grey #V(G_jaccard)
#JACCARD FOOD WEB - colour
V(G)$jaccard <- membership[,1]
V(G)$color <- "666" #V(G)$jaccard
plot.igraph(G,
main = "(a)", #Clustering through the jaccard index
vertex.label.cex=1,
vertex.size=3,
edge.arrow.size=.25,
layout=layout.matrix,
xlim = c(0,1),
ylim=c(0,3),
rescale=F,
asp=0,
#axes=T,
#ylab="Trophic position (TP)"
)
#JACCARD FOOD WEB - create
edges_jaccard <- as.matrix(edge_list_jaccard[,c("V2","V1")]) #You need to invert i and j
G_jaccard <- graph_from_edgelist(edges_jaccard)
#G_jaccard$weight <- edge_list_jaccard[,"V3"]
V(G_jaccard)$TP <- TP_jaccard
layout.matrix<-matrix( nrow=length(V(G_jaccard)),ncol=2)
layout.matrix[,1]<-runif(length(V(G_jaccard)))
layout.matrix[,2] <- TP_jaccard
V(G_jaccard)$color <- "666" #V(G_jaccard)
plot.igraph(G_jaccard,
main= "(b)", #Jaccard food web
vertex.label.cex=1,
vertex.size=3,
edge.arrow.size=.25,
layout=layout.matrix,
xlim = c(0,1),
ylim=c(0,3),
#axes=TRUE,
#ylab="Trophic position (TP)",
rescale=F,
asp=0)
#JACCARD FOOD WEB - colour
V(G)$jaccard <- membership[,1]
V(G)$color <- "666" #V(G)$jaccard
plot.igraph(G,
main = "(a)", #Clustering through the jaccard index
vertex.label.cex=1,
vertex.size=3,
edge.arrow.size=.25,
layout=layout.matrix,
xlim = c(0,1),
ylim=c(0,3),
rescale=F,
asp=0,
#axes=T,
#ylab="Trophic position (TP)"
)
#JACCARD FOOD WEB - create
edges_jaccard <- as.matrix(edge_list_jaccard[,c("V2","V1")]) #You need to invert i and j
G_jaccard <- graph_from_edgelist(edges_jaccard)
#G_jaccard$weight <- edge_list_jaccard[,"V3"]
V(G_jaccard)$TP <- TP_jaccard
layout.matrix<-matrix( nrow=length(V(G_jaccard)),ncol=2)
layout.matrix[,1]<-runif(length(V(G_jaccard)))
layout.matrix[,2] <- TP_jaccard
V(G_jaccard)$color <- "666" #V(G_jaccard)
plot.igraph(G_jaccard,
main= "(b)", #Jaccard food web
vertex.label.cex=1,
vertex.size=3,
edge.arrow.size=.25,
layout=layout.matrix,
xlim = c(0,1),
ylim=c(0,3),
#axes=TRUE,
#ylab="Trophic position (TP)",
rescale=F,
asp=0)
#JACCARD FOOD WEB - colour
V(G)$jaccard <- membership[,1]
V(G)$color <- "666" #V(G)$jaccard
plot.igraph(G,
main = "(a)", #Clustering through the jaccard index
vertex.label.cex=1,
vertex.size=3,
edge.arrow.size=.25,
layout=layout.matrix,
xlim = c(0,1),
ylim=c(0,3),
rescale=F,
asp=0,
#axes=T,
#ylab="Trophic position (TP)"
)
#JACCARD FOOD WEB - create
edges_jaccard <- as.matrix(edge_list_jaccard[,c("V2","V1")]) #You need to invert i and j
G_jaccard <- graph_from_edgelist(edges_jaccard)
#G_jaccard$weight <- edge_list_jaccard[,"V3"]
V(G_jaccard)$TP <- TP_jaccard
layout.matrix<-matrix( nrow=length(V(G_jaccard)),ncol=2)
layout.matrix[,1]<-runif(length(V(G_jaccard)))
layout.matrix[,2] <- TP_jaccard
V(G_jaccard)$color <- "666" #V(G_jaccard)
plot.igraph(G_jaccard,
main= "(b)", #Jaccard food web
vertex.label.cex=1,
vertex.size=3,
edge.arrow.size=.25,
layout=layout.matrix,
xlim = c(0,1),
ylim=c(0,3),
#axes=TRUE,
#ylab="Trophic position (TP)",
rescale=F,
asp=0)
#JACCARD FOOD WEB - colour
V(G)$jaccard <- membership[,1]
V(G)$color <- "666" #V(G)$jaccard
plot.igraph(G,
main = "(a)", #Clustering through the jaccard index
vertex.label.cex=1,
vertex.size=3,
edge.arrow.size=.25,
layout=layout.matrix,
xlim = c(0,1),
ylim=c(0,3),
rescale=F,
asp=0,
#axes=T,
#ylab="Trophic position (TP)"
)
#JACCARD FOOD WEB - create
edges_jaccard <- as.matrix(edge_list_jaccard[,c("V2","V1")]) #You need to invert i and j
G_jaccard <- graph_from_edgelist(edges_jaccard)
#G_jaccard$weight <- edge_list_jaccard[,"V3"]
V(G_jaccard)$TP <- TP_jaccard
layout.matrix<-matrix( nrow=length(V(G_jaccard)),ncol=2)
layout.matrix[,1]<-runif(length(V(G_jaccard)))
layout.matrix[,2] <- TP_jaccard
V(G_jaccard)$color <- "666" #V(G_jaccard)
plot.igraph(G_jaccard,
main= "(b)", #Jaccard food web
vertex.label.cex=1,
vertex.size=3,
edge.arrow.size=.25,
layout=layout.matrix,
xlim = c(0,1),
ylim=c(0,3),
#axes=TRUE,
#ylab="Trophic position (TP)",
rescale=F,
asp=0)
library(igraph)
library(NetIndices)
setwd('/Users/ema/Github/Data_aggregation/R_files')
#A<-get.adjacency(G,sparse=F) #i and j are inverted
#indices<-GenInd(A)
#Import data
edge_list <- read.delim('../data/edge_list_for_R.txt', header = FALSE)
edge_list_jaccard <- read.delim('../variables/edge_list_jaccard.txt', header = FALSE)
edge_list_rege <- read.delim('../variables/edge_list_rege.txt', header = FALSE)
edge_list_prey_modularity <- read.delim('../variables/edge_list_prey_modularity.txt', header = FALSE)
edge_list_density_modularity <- read.delim('../variables/edge_list_density_modularity.txt', header = FALSE)
edge_list_groups <- read.delim('../variables/edge_list_groups.txt', header = FALSE)
membership <- read.csv('../variables/membership.txt',header = FALSE)
TP <- as.matrix(read.csv('../variables/TP.txt', header = FALSE))
TP_jaccard <- as.matrix(read.csv('../variables/TP_jaccard_clusters.txt', header = FALSE))
#ORIGINAL FOOD WEB
edges <- as.matrix(edge_list[,c("V2","V1")]) #You need to invert i and j
G <- graph_from_edgelist(edges)
G$weight <- edge_list[,"V3"]
V(G)$TP <- TP[,1]
layout.matrix<-matrix( nrow=length(V(G)),ncol=2)
layout.matrix[,1]<-runif(length(V(G)))
layout.matrix[,2] <- TP[,1]
V(G)$color <- "666"
plot.igraph(G,
main= "Original food web ",
vertex.label.cex=1,
vertex.size=3,
edge.arrow.size=.25,
layout=layout.matrix,
axes=TRUE,
xlim = c(0,1),
ylim=c(0,3),
ylab="Trophic position (TP)",
rescale=F,
asp=0)
par(mfrow=c(1,2))
#JACCARD FOOD WEB - colour
V(G)$jaccard <- membership[,1]
V(G)$color <- "666" #V(G)$jaccard
plot.igraph(G,
main = "(a)", #Clustering through the jaccard index
vertex.label.cex=1,
vertex.size=3,
edge.arrow.size=.25,
layout=layout.matrix,
xlim = c(0,1),
ylim=c(0,3),
rescale=F,
asp=0,
#axes=T,
#ylab="Trophic position (TP)"
)
#JACCARD FOOD WEB - create
edges_jaccard <- as.matrix(edge_list_jaccard[,c("V2","V1")]) #You need to invert i and j
G_jaccard <- graph_from_edgelist(edges_jaccard)
#G_jaccard$weight <- edge_list_jaccard[,"V3"]
V(G_jaccard)$TP <- TP_jaccard
layout.matrix<-matrix( nrow=length(V(G_jaccard)),ncol=2)
layout.matrix[,1]<-runif(length(V(G_jaccard)))
layout.matrix[,2] <- TP_jaccard
V(G_jaccard)$color <- "666" #V(G_jaccard)
plot.igraph(G_jaccard,
main= "(b)", #Jaccard food web
vertex.label.cex=1,
vertex.size=3,
edge.arrow.size=.25,
layout=layout.matrix,
xlim = c(0,1),
ylim=c(0,3),
#axes=TRUE,
#ylab="Trophic position (TP)",
rescale=F,
asp=0)
plot.igraph(G_jaccard,
main= "(b)", #Jaccard food web
vertex.label.cex=0,
vertex.size=3,
edge.arrow.size=.25,
layout=layout.matrix,
xlim = c(0,1),
ylim=c(0,3),
#axes=TRUE,
#ylab="Trophic position (TP)",
rescale=F,
asp=0)
plot.igraph(G_jaccard,
main= "(b)", #Jaccard food web
vertex.label=NA,
vertex.size=3,
edge.arrow.size=.25,
layout=layout.matrix,
xlim = c(0,1),
ylim=c(0,3),
#axes=TRUE,
#ylab="Trophic position (TP)",
rescale=F,
asp=0)
library(igraph)
library(NetIndices)
setwd('/Users/ema/Github/Data_aggregation/R_files')
#A<-get.adjacency(G,sparse=F) #i and j are inverted
#indices<-GenInd(A)
#Import data
edge_list <- read.delim('../data/edge_list_for_R.txt', header = FALSE)
edge_list_jaccard <- read.delim('../variables/edge_list_jaccard.txt', header = FALSE)
edge_list_rege <- read.delim('../variables/edge_list_rege.txt', header = FALSE)
edge_list_prey_modularity <- read.delim('../variables/edge_list_prey_modularity.txt', header = FALSE)
edge_list_density_modularity <- read.delim('../variables/edge_list_density_modularity.txt', header = FALSE)
edge_list_groups <- read.delim('../variables/edge_list_groups.txt', header = FALSE)
membership <- read.csv('../variables/membership.txt',header = FALSE)
TP <- as.matrix(read.csv('../variables/TP.txt', header = FALSE))
TP_jaccard <- as.matrix(read.csv('../variables/TP_jaccard_clusters.txt', header = FALSE))
#ORIGINAL FOOD WEB
edges <- as.matrix(edge_list[,c("V2","V1")]) #You need to invert i and j
G <- graph_from_edgelist(edges)
G$weight <- edge_list[,"V3"]
V(G)$TP <- TP[,1]
layout.matrix<-matrix( nrow=length(V(G)),ncol=2)
layout.matrix[,1]<-runif(length(V(G)))
layout.matrix[,2] <- TP[,1]
V(G)$color <- "666"
plot.igraph(G,
main= "Original food web ",
vertex.label=NA,
vertex.size=3,
edge.arrow.size=.25,
layout=layout.matrix,
axes=TRUE,
xlim = c(0,1),
ylim=c(0,3),
ylab="Trophic position (TP)",
rescale=F,
asp=0)
library(igraph)
library(NetIndices)
setwd('/Users/ema/Github/Data_aggregation/R_files')
#A<-get.adjacency(G,sparse=F) #i and j are inverted
#indices<-GenInd(A)
#Import data
edge_list <- read.delim('../data/edge_list_for_R.txt', header = FALSE)
edge_list_jaccard <- read.delim('../variables/edge_list_jaccard.txt', header = FALSE)
edge_list_rege <- read.delim('../variables/edge_list_rege.txt', header = FALSE)
edge_list_prey_modularity <- read.delim('../variables/edge_list_prey_modularity.txt', header = FALSE)
edge_list_density_modularity <- read.delim('../variables/edge_list_density_modularity.txt', header = FALSE)
edge_list_groups <- read.delim('../variables/edge_list_groups.txt', header = FALSE)
membership <- read.csv('../variables/membership.txt',header = FALSE)
TP <- as.matrix(read.csv('../variables/TP.txt', header = FALSE))
TP_jaccard <- as.matrix(read.csv('../variables/TP_jaccard_clusters.txt', header = FALSE))
#ORIGINAL FOOD WEB
edges <- as.matrix(edge_list[,c("V2","V1")]) #You need to invert i and j
G <- graph_from_edgelist(edges)
G$weight <- edge_list[,"V3"]
V(G)$TP <- TP[,1]
layout.matrix<-matrix( nrow=length(V(G)),ncol=2)
layout.matrix[,1]<-runif(length(V(G)))
layout.matrix[,2] <- TP[,1]
V(G)$color <- "666"
plot.igraph(G,
main= "Original food web ",
vertex.label=NA,
vertex.size=3,
edge.arrow.size=.25,
layout=layout.matrix,
axes=TRUE,
xlim = c(0,1),
ylim=c(0,3),
ylab="Trophic position (TP)",
rescale=F,
asp=0)
library(igraph)
library(NetIndices)
setwd('/Users/ema/Github/Data_aggregation/R_files')
#A<-get.adjacency(G,sparse=F) #i and j are inverted
#indices<-GenInd(A)
#Import data
edge_list <- read.delim('../data/edge_list_for_R.txt', header = FALSE)
edge_list_jaccard <- read.delim('../variables/edge_list_jaccard.txt', header = FALSE)
edge_list_rege <- read.delim('../variables/edge_list_rege.txt', header = FALSE)
edge_list_prey_modularity <- read.delim('../variables/edge_list_prey_modularity.txt', header = FALSE)
edge_list_density_modularity <- read.delim('../variables/edge_list_density_modularity.txt', header = FALSE)
edge_list_groups <- read.delim('../variables/edge_list_groups.txt', header = FALSE)
membership <- read.csv('../variables/membership.txt',header = FALSE)
TP <- as.matrix(read.csv('../variables/TP.txt', header = FALSE))
TP_jaccard <- as.matrix(read.csv('../variables/TP_jaccard_clusters.txt', header = FALSE))
#ORIGINAL FOOD WEB
edges <- as.matrix(edge_list[,c("V2","V1")]) #You need to invert i and j
G <- graph_from_edgelist(edges)
G$weight <- edge_list[,"V3"]
V(G)$TP <- TP[,1]
layout.matrix<-matrix( nrow=length(V(G)),ncol=2)
layout.matrix[,1]<-runif(length(V(G)))
layout.matrix[,2] <- TP[,1]
V(G)$color <- "666"
plot.igraph(G,
main= "Original food web ",
vertex.label=NA,
vertex.size=3,
edge.arrow.size=.25,
layout=layout.matrix,
axes=TRUE,
xlim = c(0,1),
ylim=c(0,3),
ylab="Trophic position (TP)",
rescale=F,
asp=0)
library(igraph)
library(NetIndices)
setwd('/Users/ema/Github/Data_aggregation/R_files')
#A<-get.adjacency(G,sparse=F) #i and j are inverted
#indices<-GenInd(A)
#Import data
edge_list <- read.delim('../data/edge_list_for_R.txt', header = FALSE)
edge_list_jaccard <- read.delim('../variables/edge_list_jaccard.txt', header = FALSE)
edge_list_rege <- read.delim('../variables/edge_list_rege.txt', header = FALSE)
edge_list_prey_modularity <- read.delim('../variables/edge_list_prey_modularity.txt', header = FALSE)
edge_list_density_modularity <- read.delim('../variables/edge_list_density_modularity.txt', header = FALSE)
edge_list_groups <- read.delim('../variables/edge_list_groups.txt', header = FALSE)
membership <- read.csv('../variables/membership.txt',header = FALSE)
TP <- as.matrix(read.csv('../variables/TP.txt', header = FALSE))
TP_jaccard <- as.matrix(read.csv('../variables/TP_jaccard_clusters.txt', header = FALSE))
#ORIGINAL FOOD WEB
edges <- as.matrix(edge_list[,c("V2","V1")]) #You need to invert i and j
G <- graph_from_edgelist(edges)
G$weight <- edge_list[,"V3"]
V(G)$TP <- TP[,1]
layout.matrix<-matrix( nrow=length(V(G)),ncol=2)
layout.matrix[,1]<-runif(length(V(G)))
layout.matrix[,2] <- TP[,1]
V(G)$color <- "666"
plot.igraph(G,
main= "Original food web ",
vertex.label=NA,
vertex.size=2,
edge.arrow.size=.25,
layout=layout.matrix,
axes=TRUE,
xlim = c(0,1),
ylim=c(0,3),
ylab="Trophic position (TP)",
rescale=F,
asp=0)
library(igraph)
library(NetIndices)
setwd('/Users/ema/Github/Data_aggregation/R_files')
#A<-get.adjacency(G,sparse=F) #i and j are inverted
#indices<-GenInd(A)
#Import data
edge_list <- read.delim('../data/edge_list_for_R.txt', header = FALSE)
edge_list_jaccard <- read.delim('../variables/edge_list_jaccard.txt', header = FALSE)
edge_list_rege <- read.delim('../variables/edge_list_rege.txt', header = FALSE)
edge_list_prey_modularity <- read.delim('../variables/edge_list_prey_modularity.txt', header = FALSE)
edge_list_density_modularity <- read.delim('../variables/edge_list_density_modularity.txt', header = FALSE)
edge_list_groups <- read.delim('../variables/edge_list_groups.txt', header = FALSE)
membership <- read.csv('../variables/membership.txt',header = FALSE)
TP <- as.matrix(read.csv('../variables/TP.txt', header = FALSE))
TP_jaccard <- as.matrix(read.csv('../variables/TP_jaccard_clusters.txt', header = FALSE))
#ORIGINAL FOOD WEB
edges <- as.matrix(edge_list[,c("V2","V1")]) #You need to invert i and j
G <- graph_from_edgelist(edges)
G$weight <- edge_list[,"V3"]
V(G)$TP <- TP[,1]
layout.matrix<-matrix( nrow=length(V(G)),ncol=2)
layout.matrix[,1]<-runif(length(V(G)))
layout.matrix[,2] <- TP[,1]
V(G)$color <- "666"
plot.igraph(G,
main= "Original food web ",
vertex.label=NA,
vertex.size=1,
edge.arrow.size=.25,
layout=layout.matrix,
axes=TRUE,
xlim = c(0,1),
ylim=c(0,3),
ylab="Trophic position (TP)",
rescale=F,
asp=0)
library(igraph)
library(NetIndices)
setwd('/Users/ema/Github/Data_aggregation/R_files')
#A<-get.adjacency(G,sparse=F) #i and j are inverted
#indices<-GenInd(A)
#Import data
edge_list <- read.delim('../data/edge_list_for_R.txt', header = FALSE)
edge_list_jaccard <- read.delim('../variables/edge_list_jaccard.txt', header = FALSE)
edge_list_rege <- read.delim('../variables/edge_list_rege.txt', header = FALSE)
edge_list_prey_modularity <- read.delim('../variables/edge_list_prey_modularity.txt', header = FALSE)
edge_list_density_modularity <- read.delim('../variables/edge_list_density_modularity.txt', header = FALSE)
edge_list_groups <- read.delim('../variables/edge_list_groups.txt', header = FALSE)
membership <- read.csv('../variables/membership.txt',header = FALSE)
TP <- as.matrix(read.csv('../variables/TP.txt', header = FALSE))
TP_jaccard <- as.matrix(read.csv('../variables/TP_jaccard_clusters.txt', header = FALSE))
#ORIGINAL FOOD WEB
edges <- as.matrix(edge_list[,c("V2","V1")]) #You need to invert i and j
G <- graph_from_edgelist(edges)
G$weight <- edge_list[,"V3"]
V(G)$TP <- TP[,1]
layout.matrix<-matrix( nrow=length(V(G)),ncol=2)
layout.matrix[,1]<-runif(length(V(G)))
layout.matrix[,2] <- TP[,1]
V(G)$color <- "666"
plot.igraph(G,
main= "Original food web ",
vertex.label=NA,
vertex.size=2,
edge.arrow.size=.25,
layout=layout.matrix,
axes=TRUE,
xlim = c(0,1),
ylim=c(0,3),
ylab="Trophic position (TP)",
rescale=F,
asp=0)
par(mfrow=c(1,2))
#JACCARD FOOD WEB - colour
V(G)$jaccard <- membership[,1]
V(G)$color <- "666" #V(G)$jaccard
plot.igraph(G,
main = "(a)", #Clustering through the jaccard index
vertex.label=NA,
vertex.size=3,
edge.arrow.size=.25,
layout=layout.matrix,
xlim = c(0,1),
ylim=c(0,3),
rescale=F,
asp=0,
#axes=T,
#ylab="Trophic position (TP)"
)
#JACCARD FOOD WEB - create
edges_jaccard <- as.matrix(edge_list_jaccard[,c("V2","V1")]) #You need to invert i and j
G_jaccard <- graph_from_edgelist(edges_jaccard)
#G_jaccard$weight <- edge_list_jaccard[,"V3"]
V(G_jaccard)$TP <- TP_jaccard
layout.matrix<-matrix( nrow=length(V(G_jaccard)),ncol=2)
layout.matrix[,1]<-runif(length(V(G_jaccard)))
layout.matrix[,2] <- TP_jaccard
V(G_jaccard)$color <- "666" #V(G_jaccard)
plot.igraph(G_jaccard,
main= "(b)", #Jaccard food web
vertex.label=NA,
vertex.size=3,
edge.arrow.size=.25,
layout=layout.matrix,
xlim = c(0,1),
ylim=c(0,3),
#axes=TRUE,
#ylab="Trophic position (TP)",
rescale=F,
asp=0)
