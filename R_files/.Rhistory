read.matrix('/Users/ema/Github/Data_aggregation/data/adjacency_matrix.txt')
read.matrix('/Users/ema/Github/Data_aggregation/data/adjacency_matrix.txt',header=FALSE)
read.matrix('/Users/ema/Github/Data_aggregation/data/adjacency_matrix.txt',header=FALSE,sep = ",")
read.matrix('/Users/ema/Github/Data_aggregation/data/adjacency_matrix.txt',header=FALSE,sep = ",")
install.packages(tseries)
install.packages("tseries")
read.matrix('/Users/ema/Github/Data_aggregation/data/adjacency_matrix.txt',header=FALSE,sep = ",")
install.packages("futile.matrix")
matrix <- read.delim('../data/adjacency_matrix.txt', header = FALSE)
matrix <- read.delim('../data/adjacency_matrix.txt', header = FALSE)
setwd('/Users/ema/Github/Data_aggregation/R_files')
matrix <- read.delim('../data/adjacency_matrix.txt', header = FALSE)
View(matrix)
library(bootnet)
library(plyr)
library(dplyr)
library(tidyr)
setwd('/Users/ema/Github/Learning/R/Bootnet')
FullData <- read.csv("qs.csv", stringsAsFactors = FALSE)
Data <- FullData %>%
filter(EPOCH == "BASELINE",grepl("^PSSR\\d+A$",QSTESTCD)) %>%
select(USUBJID,QSTEST,QSORRES) %>%
spread(QSTEST, QSORRES) %>%
select(-USUBJID) %>%
replace(.,.=="NOT ANSWERED",NA)
View(indices)
library(bootnet)
library(plyr)
library(dplyr)
library(tidyr)
setwd('/Users/ema/Github/Learning/R/Bootnet')
FullData <- read.csv("qs.csv", stringsAsFactors = FALSE)
FullData
glimpse(FullData)
Data <- FullData %>%
filter(EPOCH == "BASELINE",grepl("^PSSR\\d+A$",QSTESTCD)) %>%
select(USUBJID,QSTEST,QSORRES) %>%
spread(QSTEST, QSORRES) %>%
select(-USUBJID) %>%
replace(.,.=="NOT ANSWERED",NA) %>% #mutate_each_()` is deprecated as of dplyr 0.7.0. Please use `across()` instead.
#mutate(across(funs(ordered(.,c("NOT AT ALL","ONCE A WEEK","2-4 TIMES PER WEEK/HALF THE TIME", "5 OR MORE TIMES PER WEEK/ALMOST ALWAYS")))))
Data <- FullData %>%
filter(EPOCH == "BASELINE",grepl("^PSSR\\d+A$",QSTESTCD)) %>%
select(USUBJID,QSTEST,QSORRES) %>%
spread(QSTEST, QSORRES) %>%
select(-USUBJID) %>%
replace(.,.=="NOT ANSWERED",NA) #%>% #mutate_each_()` is deprecated as of dplyr 0.7.0. Please use `across()` instead.
#mutate(across(funs(ordered(.,c("NOT AT ALL","ONCE A WEEK","2-4 TIMES PER WEEK/HALF THE TIME", "5 OR MORE TIMES PER WEEK/ALMOST ALWAYS")))))
Data <- FullData
View(Data)
View(FullData)
Data <- FullData %>%
filter(EPOCH == "BASELINE",grepl("^PSSR\\d+A$",QSTESTCD)) #%>%
Data <- FullData %>%
filter(EPOCH == "BASELINE",grepl("^PSSR\\d+A$",QSTESTCD)) %>%
select(USUBJID,QSTEST,QSORRES)
Data <- FullData %>%
filter(EPOCH == "BASELINE",grepl("^PSSR\\d+A$",QSTESTCD)) %>%
select(USUBJID,QSTEST,QSORRES) %>%
spread(QSTEST, QSORRES)
Data <- FullData %>%
filter(EPOCH == "BASELINE",grepl("^PSSR\\d+A$",QSTESTCD)) %>%
select(USUBJID,QSTEST,QSORRES) %>%
spread(QSTEST, QSORRES) %>%
select(-USUBJID)
Data <- FullData %>%
filter(EPOCH == "BASELINE",grepl("^PSSR\\d+A$",QSTESTCD)) %>%
select(USUBJID,QSTEST,QSORRES) %>%
spread(QSTEST, QSORRES) %>%
select(-USUBJID) #%>%
Data <- FullData %>%
filter(EPOCH == "BASELINE",grepl("^PSSR\\d+A$",QSTESTCD)) %>%
select(USUBJID,QSTEST,QSORRES) %>%
spread(QSTEST, QSORRES) %>%
select(-USUBJID) %>%
replace(.,.=="NOT ANSWERED",NA) %>%
mutate(across(funs(ordered(.,c("NOT AT ALL","ONCE A WEEK","2-4 TIMES PER WEEK/HALF THE TIME", "5 OR MORE TIMES PER WEEK/ALMOST ALWAYS")))))
View(FullData)
FullData <- read.csv("qs.csv", stringsAsFactors = FALSE)
FullData2 <- read.csv("qs.csv")
FullData <- read.csv("qs.csv", stringsAsFactors = FALSE)
View(FullData)
View(FullData2)
glimpse(FullData)
Data <- FullData %>%
filter(EPOCH == "BASELINE",grepl("^PSSR\\d+A$",QSTESTCD)) %>%
select(USUBJID,QSTEST,QSORRES) %>%
spread(QSTEST, QSORRES) %>%
select(-USUBJID) %>%
mutate(across(everything(),~replace(., .== "NOT ANSWERED", NA)))
View(FullData)
FullData <- read.csv("qs.csv", stringsAsFactors = FALSE)
View(FullData)
dplyr
packageVersion("dplyr")
library(igraph)
library(NetIndices)
setwd('/Users/ema/Github/Data_aggregation/R_files')
#Import data
edge_list <- read.delim('../data/edge_list_for_R.txt', header = FALSE)
edge_list_jaccard <- read.delim('../variables/edge_list_jaccard.txt', header = FALSE)
edge_list_rege <- read.delim('../variables/edge_list_rege.txt', header = FALSE)
edge_list_prey_modularity <- read.delim('../variables/edge_list_prey_modularity.txt', header = FALSE)
edge_list_density_modularity <- read.delim('../variables/edge_list_density_modularity.txt', header = FALSE)
edge_list_groups <- read.delim('../variables/edge_list_groups.txt', header = FALSE)
membership <- read.csv('../variables/membership.txt',header = FALSE)
TP <- as.matrix(read.csv('../variables/TP.txt', header = FALSE))
TP_jaccard <- as.matrix(read.csv('../variables/TP_jaccard_clusters.txt', header = FALSE))
#ORIGINAL FOOD WEB
edges <- as.matrix(edge_list[,c("V2","V1")]) #You need to invert i and j
G <- graph_from_edgelist(edges)
G$weight <- edge_list[,"V3"]
V(G)$TP <- TP[,1]
layout.matrix<-matrix( nrow=length(V(G)),ncol=2)
layout.matrix[,1]<-runif(length(V(G)))
layout.matrix[,2] <- TP[,1]
V(G)$color <- "666"
plot.igraph(G,
main= "Original food web ",
vertex.label=NA,
vertex.size=2,
edge.arrow.size=.25,
layout=layout.matrix,
axes=TRUE,
xlim = c(0,1),
ylim=c(0,3),
ylab="Trophic position (TP)",
rescale=F,
asp=0)
A<-get.adjacency(G,sparse=F) #i and j are inverted
indices<-GenInd(A)
network <- G
plot(Network, layout = "spring", labels = FALSE)
Network <- G
Network <- G
plot(Network, layout = "spring", labels = FALSE)
plot(Network, layout = "spring", labels = TRUE)
plot(network)
plot(network,layout(spring))
plot(network,layout="spring")
install.packages(qgraph)
install.packages(qgraph)
install.packages("qgraph")
library(qgraph)
plot(Network, layout = "spring", labels = FALSE)
plot(Network, layout = "spring", labels = TRUE)
centralityPlot(Network)
